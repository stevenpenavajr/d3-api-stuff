/// <reference types="node" />
import { EventEmitter } from 'events';
import { Connection, ConnectionOpts } from './connection';
import { Plugin } from './util/plugin-interface';
export { Connection } from './connection';
export { DataAndMoneyStream } from './stream';
export interface CreateConnectionOpts extends ConnectionOpts {
    destinationAccount: string;
    sharedSecret: Buffer;
}
export declare function createConnection(opts: CreateConnectionOpts): Promise<Connection>;
export interface ServerOpts extends ConnectionOpts {
    serverSecret?: Buffer;
}
export declare class Server extends EventEmitter {
    protected serverSecret: Buffer;
    protected plugin: Plugin;
    protected serverAccount: string;
    protected serverAssetCode: string;
    protected serverAssetScale: number;
    protected connections: {
        [key: string]: Connection;
    };
    protected closedConnections: {
        [key: string]: boolean;
    };
    protected log: any;
    protected enablePadding?: boolean;
    protected connected: boolean;
    protected connectionOpts: ConnectionOpts;
    constructor(opts: ServerOpts);
    listen(): Promise<void>;
    close(): Promise<void>;
    acceptConnection(): Promise<Connection>;
    generateAddressAndSecret(connectionTag?: string): {
        destinationAccount: string;
        sharedSecret: Buffer;
    };
    readonly assetCode: string;
    readonly assetScale: number;
    protected handleData(data: Buffer): Promise<Buffer>;
}
export declare function createServer(opts: ServerOpts): Promise<Server>;
