/// <reference types="node" />
import { Reader, Writer } from 'oer-utils';
import BigNumber from 'bignumber.js';
export declare enum IlpPacketType {
    Prepare = 12,
    Fulfill = 13,
    Reject = 14
}
export declare enum ErrorCode {
    NoError = 1,
    InternalError = 2,
    EndpointBusy = 3,
    FlowControlError = 4,
    StreamIdError = 5,
    StreamStateError = 6,
    FrameFormatError = 7,
    ProtocolViolation = 8,
    ApplicationError = 9
}
export declare enum FrameType {
    ConnectionClose = 1,
    ConnectionNewAddress = 2,
    ConnectionMaxData = 3,
    ConnectionDataBlocked = 4,
    ConnectionMaxStreamId = 5,
    ConnectionStreamIdBlocked = 6,
    ConnectionAssetDetails = 7,
    StreamClose = 16,
    StreamMoney = 17,
    StreamMaxMoney = 18,
    StreamMoneyBlocked = 19,
    StreamData = 20,
    StreamMaxData = 21,
    StreamDataBlocked = 22
}
export declare type Frame = ConnectionCloseFrame | ConnectionNewAddressFrame | ConnectionAssetDetailsFrame | ConnectionMaxDataFrame | ConnectionDataBlockedFrame | ConnectionMaxStreamIdFrame | ConnectionStreamIdBlockedFrame | StreamCloseFrame | StreamMoneyFrame | StreamMaxMoneyFrame | StreamMoneyBlockedFrame | StreamDataFrame | StreamMaxDataFrame | StreamDataBlockedFrame;
export declare class Packet {
    sequence: BigNumber;
    ilpPacketType: IlpPacketType;
    prepareAmount: BigNumber;
    frames: Frame[];
    constructor(sequence: BigNumber.Value, ilpPacketType: IlpPacketType, packetAmount?: BigNumber.Value, frames?: Frame[]);
    static decryptAndDeserialize(sharedSecret: Buffer, buffer: Buffer): Packet;
    static _deserializeUnencrypted(buffer: Buffer): Packet;
    serializeAndEncrypt(sharedSecret: Buffer, padPacketToSize?: number): Buffer;
    _serialize(): Buffer;
    writeTo(writer: Writer): void;
    byteLength(): number;
}
export declare abstract class BaseFrame {
    type: FrameType;
    name: string;
    constructor(name: keyof typeof FrameType);
    static fromContents(reader: Reader): BaseFrame;
    writeTo(writer: Writer): Writer;
    byteLength(): number;
}
export declare class ConnectionCloseFrame extends BaseFrame {
    type: FrameType.ConnectionClose;
    errorCode: ErrorCode;
    errorMessage: string;
    constructor(errorCode: ErrorCode, errorMessage: string);
    static fromContents(reader: Reader): ConnectionCloseFrame;
}
export declare class ConnectionNewAddressFrame extends BaseFrame {
    type: FrameType.ConnectionNewAddress;
    sourceAccount: string;
    constructor(sourceAccount: string);
    static fromContents(reader: Reader): ConnectionNewAddressFrame;
}
export declare class ConnectionAssetDetailsFrame extends BaseFrame {
    type: FrameType.ConnectionAssetDetails;
    sourceAssetCode: string;
    sourceAssetScale: number;
    constructor(sourceAssetCode: string, sourceAssetScale: number);
    static fromContents(reader: Reader): ConnectionAssetDetailsFrame;
}
export declare class ConnectionMaxDataFrame extends BaseFrame {
    type: FrameType.ConnectionMaxData;
    maxOffset: BigNumber;
    constructor(maxOffset: BigNumber.Value);
    static fromContents(reader: Reader): ConnectionMaxDataFrame;
}
export declare class ConnectionDataBlockedFrame extends BaseFrame {
    type: FrameType.ConnectionDataBlocked;
    maxOffset: BigNumber;
    constructor(maxOffset: BigNumber.Value);
    static fromContents(reader: Reader): ConnectionDataBlockedFrame;
}
export declare class ConnectionMaxStreamIdFrame extends BaseFrame {
    type: FrameType.ConnectionMaxStreamId;
    maxStreamId: BigNumber;
    constructor(maxStreamId: BigNumber.Value);
    static fromContents(reader: Reader): ConnectionMaxStreamIdFrame;
}
export declare class ConnectionStreamIdBlockedFrame extends BaseFrame {
    type: FrameType.ConnectionStreamIdBlocked;
    maxStreamId: BigNumber;
    constructor(maxStreamId: BigNumber.Value);
    static fromContents(reader: Reader): ConnectionStreamIdBlockedFrame;
}
export declare class StreamCloseFrame extends BaseFrame {
    type: FrameType.StreamClose;
    streamId: BigNumber;
    errorCode: ErrorCode;
    errorMessage: string;
    constructor(streamId: BigNumber.Value, errorCode: ErrorCode, errorMessage: string);
    static fromContents(reader: Reader): StreamCloseFrame;
}
export declare class StreamMoneyFrame extends BaseFrame {
    type: FrameType.StreamMoney;
    streamId: BigNumber;
    shares: BigNumber;
    constructor(streamId: BigNumber.Value, shares: BigNumber.Value);
    static fromContents(reader: Reader): StreamMoneyFrame;
}
export declare class StreamMaxMoneyFrame extends BaseFrame {
    type: FrameType.StreamMaxMoney;
    streamId: BigNumber;
    receiveMax: BigNumber;
    totalReceived: BigNumber;
    constructor(streamId: BigNumber.Value, receiveMax: BigNumber.Value, totalReceived: BigNumber.Value);
    static fromContents(reader: Reader): StreamMaxMoneyFrame;
}
export declare class StreamMoneyBlockedFrame extends BaseFrame {
    type: FrameType.StreamMoneyBlocked;
    streamId: BigNumber;
    sendMax: BigNumber;
    totalSent: BigNumber;
    constructor(streamId: BigNumber.Value, sendMax: BigNumber.Value, totalSent: BigNumber.Value);
    static fromContents(reader: Reader): StreamMoneyBlockedFrame;
}
export declare class StreamDataFrame extends BaseFrame {
    type: FrameType.StreamData;
    streamId: BigNumber;
    offset: BigNumber;
    data: Buffer;
    constructor(streamId: BigNumber.Value, offset: BigNumber.Value, data: Buffer);
    static fromContents(reader: Reader): StreamDataFrame;
    toJSON(): Object;
}
export declare class StreamMaxDataFrame extends BaseFrame {
    type: FrameType.StreamMaxData;
    streamId: BigNumber;
    maxOffset: BigNumber;
    constructor(streamId: BigNumber.Value, maxOffset: BigNumber.Value);
    static fromContents(reader: Reader): StreamMaxDataFrame;
}
export declare class StreamDataBlockedFrame extends BaseFrame {
    type: FrameType.StreamDataBlocked;
    streamId: BigNumber;
    maxOffset: BigNumber;
    constructor(streamId: BigNumber.Value, maxOffset: BigNumber.Value);
    static fromContents(reader: Reader): StreamDataBlockedFrame;
}
