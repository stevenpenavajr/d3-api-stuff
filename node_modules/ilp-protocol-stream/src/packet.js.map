{"version":3,"file":"packet.js","sourceRoot":"","sources":["packet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reader, Writer, Predictor } from 'oer-utils'\nimport BigNumber from 'bignumber.js'\nimport { encrypt, decrypt, ENCRYPTION_OVERHEAD } from './crypto'\nimport * as assert from 'assert'\nrequire('source-map-support').install()\n\nconst VERSION = 1\n\nconst ZERO_BYTES = Buffer.alloc(32)\nconst MAX_UINT64 = new BigNumber('18446744073709551615')\n\n/**\n * ILPv4 Packet Type Identifiers\n */\nexport enum IlpPacketType {\n  Prepare = 12,\n  Fulfill = 13,\n  Reject = 14\n}\n\n/**\n * STREAM Protocol Error Codes\n */\nexport enum ErrorCode {\n  NoError = 0x01,\n  InternalError = 0x02,\n  EndpointBusy = 0x03,\n  FlowControlError = 0x04,\n  StreamIdError = 0x05,\n  StreamStateError = 0x06,\n  FrameFormatError = 0x07,\n  ProtocolViolation = 0x08,\n  ApplicationError = 0x09\n}\n\n/**\n * STREAM Protocol Frame Identifiers\n */\nexport enum FrameType {\n  ConnectionClose = 0x01,\n  ConnectionNewAddress = 0x02,\n  ConnectionMaxData = 0x03,\n  ConnectionDataBlocked = 0x04,\n  ConnectionMaxStreamId = 0x05,\n  ConnectionStreamIdBlocked = 0x06,\n  ConnectionAssetDetails = 0x07,\n\n  StreamClose = 0x10,\n  StreamMoney = 0x11,\n  StreamMaxMoney = 0x12,\n  StreamMoneyBlocked = 0x13,\n  StreamData = 0x14,\n  StreamMaxData = 0x15,\n  StreamDataBlocked = 0x16\n}\n\n/**\n * All of the frames included in the STREAM protocol\n */\nexport type Frame =\n  ConnectionCloseFrame\n  | ConnectionNewAddressFrame\n  | ConnectionAssetDetailsFrame\n  | ConnectionMaxDataFrame\n  | ConnectionDataBlockedFrame\n  | ConnectionMaxStreamIdFrame\n  | ConnectionStreamIdBlockedFrame\n  | StreamCloseFrame\n  | StreamMoneyFrame\n  | StreamMaxMoneyFrame\n  | StreamMoneyBlockedFrame\n  | StreamDataFrame\n  | StreamMaxDataFrame\n  | StreamDataBlockedFrame\n\n/**\n * STREAM Protocol Packet\n *\n * Each packet is comprised of a header and zero or more Frames.\n * Packets are serialized, encrypted, and sent as the data field in ILP Packets.\n */\nexport class Packet {\n  sequence: BigNumber\n  ilpPacketType: IlpPacketType\n  prepareAmount: BigNumber\n  frames: Frame[]\n\n  constructor (sequence: BigNumber.Value, ilpPacketType: IlpPacketType, packetAmount: BigNumber.Value = 0, frames: Frame[] = []) {\n    this.sequence = new BigNumber(sequence)\n    this.ilpPacketType = ilpPacketType\n    this.prepareAmount = new BigNumber(packetAmount)\n    this.frames = frames\n  }\n\n  static decryptAndDeserialize (sharedSecret: Buffer, buffer: Buffer): Packet {\n    let decrypted: Buffer\n    try {\n      decrypted = decrypt(sharedSecret, buffer)\n    } catch (err) {\n      throw new Error(`Unable to decrypt packet. Data was corrupted or packet was encrypted with the wrong key`)\n    }\n    return Packet._deserializeUnencrypted(decrypted)\n  }\n\n  /** @private */\n  static _deserializeUnencrypted (buffer: Buffer): Packet {\n    const reader = Reader.from(buffer)\n    const version = reader.readUInt8BigNum()\n    if (!version.isEqualTo(VERSION)) {\n      throw new Error(`Unsupported protocol version: ${version}`)\n    }\n    const ilpPacketType = reader.readUInt8BigNum().toNumber()\n    const sequence = reader.readVarUIntBigNum()\n    const packetAmount = reader.readVarUIntBigNum()\n    const numFrames = reader.readVarUIntBigNum().toNumber()\n    const frames: Frame[] = []\n\n    for (let i = 0; i < numFrames; i++) {\n      const frame = parseFrame(reader)\n      if (frame) {\n        frames.push(frame)\n      }\n    }\n    return new Packet(sequence, ilpPacketType, packetAmount, frames)\n  }\n\n  serializeAndEncrypt (sharedSecret: Buffer, padPacketToSize?: number): Buffer {\n    const serialized = this._serialize()\n\n    // Pad packet to max data size, if desired\n    if (padPacketToSize !== undefined) {\n      const paddingSize = padPacketToSize - ENCRYPTION_OVERHEAD - serialized.length\n      const args = [sharedSecret, serialized]\n      for (let i = 0; i < Math.floor(paddingSize / 32); i++) {\n        args.push(ZERO_BYTES)\n      }\n      args.push(ZERO_BYTES.slice(0, paddingSize % 32))\n      return encrypt.apply(null, args)\n    }\n\n    return encrypt(sharedSecret, serialized)\n  }\n\n  /** @private */\n  _serialize (): Buffer {\n    const writer = new Writer()\n    this.writeTo(writer)\n    return writer.getBuffer()\n  }\n\n  writeTo (writer: Writer): void {\n    // Write the packet header\n    writer.writeUInt8(VERSION)\n    writer.writeUInt8(this.ilpPacketType)\n    writer.writeVarUInt(this.sequence)\n    writer.writeVarUInt(this.prepareAmount)\n\n    // Write the number of frames (excluding padding)\n    writer.writeVarUInt(this.frames.length)\n\n    // Write each of the frames\n    for (let frame of this.frames) {\n      frame.writeTo(writer)\n    }\n  }\n\n  byteLength (): number {\n    const predictor = new Predictor()\n    this.writeTo(predictor)\n    return predictor.getSize() + ENCRYPTION_OVERHEAD\n  }\n}\n\n/**\n * Base class that each Frame extends\n */\nexport abstract class BaseFrame {\n  type: FrameType\n  name: string\n\n  constructor (name: keyof typeof FrameType) {\n    this.type = FrameType[name]\n    this.name = name\n  }\n\n  static fromContents (reader: Reader): BaseFrame {\n    throw new Error(`class method \"fromContents\" is not implemented`)\n  }\n\n  writeTo (writer: Writer): Writer {\n    const properties = Object.getOwnPropertyNames(this).filter((propName: string) => propName !== 'type' && propName !== 'name')\n\n    writer.writeUInt8(this.type)\n\n    const contents = new Writer()\n    for (let prop of properties) {\n      if (typeof this[prop] === 'number') {\n        contents.writeUInt8(this[prop])\n      } else if (typeof this[prop] === 'string') {\n        contents.writeVarOctetString(Buffer.from(this[prop], 'utf8'))\n      } else if (Buffer.isBuffer(this[prop])) {\n        contents.writeVarOctetString(this[prop])\n      } else if (this[prop] instanceof BigNumber) {\n        contents.writeVarUInt(this[prop])\n      } else {\n        throw new Error(`Unexpected property type for property \"${prop}\": ${typeof this[prop]}`)\n      }\n    }\n\n    // TODO don't copy data again\n    writer.writeVarOctetString(contents.getBuffer())\n    return writer\n  }\n\n  byteLength (): number {\n    const predictor = new Predictor()\n    this.writeTo(predictor)\n    return predictor.getSize()\n  }\n}\n\nexport class ConnectionCloseFrame extends BaseFrame {\n  type: FrameType.ConnectionClose\n  errorCode: ErrorCode\n  errorMessage: string\n\n  constructor (errorCode: ErrorCode, errorMessage: string) {\n    super('ConnectionClose')\n    this.errorCode = errorCode\n    this.errorMessage = errorMessage\n  }\n\n  static fromContents (reader: Reader): ConnectionCloseFrame {\n    const errorCode = reader.readUInt8BigNum().toNumber() as ErrorCode\n    const errorMessage = reader.readVarOctetString().toString()\n    return new ConnectionCloseFrame(errorCode, errorMessage)\n  }\n}\n\nexport class ConnectionNewAddressFrame extends BaseFrame {\n  type: FrameType.ConnectionNewAddress\n  sourceAccount: string\n\n  constructor (sourceAccount: string) {\n    super('ConnectionNewAddress')\n    this.sourceAccount = sourceAccount\n  }\n\n  static fromContents (reader: Reader): ConnectionNewAddressFrame {\n    const sourceAccount = reader.readVarOctetString().toString('utf8')\n    return new ConnectionNewAddressFrame(sourceAccount)\n  }\n}\n\nexport class ConnectionAssetDetailsFrame extends BaseFrame {\n  type: FrameType.ConnectionAssetDetails\n  sourceAssetCode: string\n  sourceAssetScale: number\n\n  constructor (sourceAssetCode: string, sourceAssetScale: number) {\n    super('ConnectionAssetDetails')\n    this.sourceAssetCode = sourceAssetCode\n    this.sourceAssetScale = sourceAssetScale\n  }\n\n  static fromContents (reader: Reader): ConnectionAssetDetailsFrame {\n    const sourceAssetCode = reader.readVarOctetString().toString('utf8')\n    const sourceAssetScale = reader.readUInt8BigNum().toNumber()\n    return new ConnectionAssetDetailsFrame(sourceAssetCode, sourceAssetScale)\n  }\n}\n\nexport class ConnectionMaxDataFrame extends BaseFrame {\n  type: FrameType.ConnectionMaxData\n  maxOffset: BigNumber\n\n  constructor (maxOffset: BigNumber.Value) {\n    super('ConnectionMaxData')\n    this.maxOffset = new BigNumber(maxOffset)\n  }\n\n  static fromContents (reader: Reader): ConnectionMaxDataFrame {\n    const maxOffset = reader.readVarUIntBigNum()\n    return new ConnectionMaxDataFrame(maxOffset)\n  }\n}\n\nexport class ConnectionDataBlockedFrame extends BaseFrame {\n  type: FrameType.ConnectionDataBlocked\n  maxOffset: BigNumber\n\n  constructor (maxOffset: BigNumber.Value) {\n    super('ConnectionDataBlocked')\n    this.maxOffset = new BigNumber(maxOffset)\n  }\n\n  static fromContents (reader: Reader): ConnectionDataBlockedFrame {\n    const maxOffset = reader.readVarUIntBigNum()\n    return new ConnectionDataBlockedFrame(maxOffset)\n  }\n}\n\nexport class ConnectionMaxStreamIdFrame extends BaseFrame {\n  type: FrameType.ConnectionMaxStreamId\n  maxStreamId: BigNumber\n\n  constructor (maxStreamId: BigNumber.Value) {\n    super('ConnectionMaxStreamId')\n    this.maxStreamId = new BigNumber(maxStreamId)\n  }\n\n  static fromContents (reader: Reader): ConnectionMaxStreamIdFrame {\n    const maxStreamId = reader.readVarUIntBigNum()\n    return new ConnectionMaxStreamIdFrame(maxStreamId)\n  }\n}\n\nexport class ConnectionStreamIdBlockedFrame extends BaseFrame {\n  type: FrameType.ConnectionStreamIdBlocked\n  maxStreamId: BigNumber\n\n  constructor (maxStreamId: BigNumber.Value) {\n    super('ConnectionStreamIdBlocked')\n    this.maxStreamId = new BigNumber(maxStreamId)\n  }\n\n  static fromContents (reader: Reader): ConnectionStreamIdBlockedFrame {\n    const maxStreamId = reader.readVarUIntBigNum()\n    return new ConnectionStreamIdBlockedFrame(maxStreamId)\n  }\n}\n\nexport class StreamCloseFrame extends BaseFrame {\n  type: FrameType.StreamClose\n  streamId: BigNumber\n  errorCode: ErrorCode\n  errorMessage: string\n\n  constructor (streamId: BigNumber.Value, errorCode: ErrorCode, errorMessage: string) {\n    super('StreamClose')\n    this.streamId = new BigNumber(streamId)\n    this.errorCode = errorCode\n    this.errorMessage = errorMessage\n  }\n\n  static fromContents (reader: Reader): StreamCloseFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const errorCode = reader.readUInt8BigNum().toNumber() as ErrorCode\n    const errorMessage = reader.readVarOctetString().toString('utf8')\n    return new StreamCloseFrame(streamId, errorCode, errorMessage)\n  }\n}\n\nexport class StreamMoneyFrame extends BaseFrame {\n  type: FrameType.StreamMoney\n  streamId: BigNumber\n  shares: BigNumber\n\n  constructor (streamId: BigNumber.Value, shares: BigNumber.Value) {\n    super('StreamMoney')\n    this.streamId = new BigNumber(streamId)\n    this.shares = new BigNumber(shares)\n\n    assert(this.shares.isInteger() && this.shares.isPositive(), `shares must be a positive integer: ${shares}`)\n  }\n\n  static fromContents (reader: Reader): StreamMoneyFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const amount = reader.readVarUIntBigNum()\n    return new StreamMoneyFrame(streamId, amount)\n  }\n}\n\nexport class StreamMaxMoneyFrame extends BaseFrame {\n  type: FrameType.StreamMaxMoney\n  streamId: BigNumber\n  receiveMax: BigNumber\n  totalReceived: BigNumber\n\n  constructor (streamId: BigNumber.Value, receiveMax: BigNumber.Value, totalReceived: BigNumber.Value) {\n    super('StreamMaxMoney')\n    this.streamId = new BigNumber(streamId)\n    this.receiveMax = new BigNumber(receiveMax)\n    this.totalReceived = new BigNumber(totalReceived)\n\n    if (!this.receiveMax.isFinite()) {\n      this.receiveMax = MAX_UINT64\n    }\n\n    assert(this.receiveMax.isInteger() && this.receiveMax.isPositive(), `receiveMax must be a positive integer. got: ${receiveMax}`)\n    assert(this.totalReceived.isInteger() && this.totalReceived.isPositive(), `totalReceived must be a positive integer. got: ${totalReceived}`)\n  }\n\n  static fromContents (reader: Reader): StreamMaxMoneyFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const receiveMax = reader.readVarUIntBigNum()\n    const totalReceived = reader.readVarUIntBigNum()\n    return new StreamMaxMoneyFrame(streamId, receiveMax, totalReceived)\n  }\n}\n\nexport class StreamMoneyBlockedFrame extends BaseFrame {\n  type: FrameType.StreamMoneyBlocked\n  streamId: BigNumber\n  sendMax: BigNumber\n  totalSent: BigNumber\n\n  constructor (streamId: BigNumber.Value, sendMax: BigNumber.Value, totalSent: BigNumber.Value) {\n    super('StreamMoneyBlocked')\n    this.streamId = new BigNumber(streamId)\n    this.sendMax = new BigNumber(sendMax)\n    this.totalSent = new BigNumber(totalSent)\n\n    assert(this.sendMax.isInteger() && this.sendMax.isPositive(), `sendMax must be a positive integer. got: ${sendMax}`)\n    assert(this.totalSent.isInteger() && this.totalSent.isPositive(), `totalSent must be a positive integer. got: ${totalSent}`)\n  }\n\n  static fromContents (reader: Reader): StreamMoneyBlockedFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const sendMax = reader.readVarUIntBigNum()\n    const totalSent = reader.readVarUIntBigNum()\n    return new StreamMoneyBlockedFrame(streamId, sendMax, totalSent)\n  }\n}\n\nexport class StreamDataFrame extends BaseFrame {\n  type: FrameType.StreamData\n  streamId: BigNumber\n  offset: BigNumber\n  data: Buffer\n\n  constructor (streamId: BigNumber.Value, offset: BigNumber.Value, data: Buffer) {\n    super('StreamData')\n    this.streamId = new BigNumber(streamId)\n    this.offset = new BigNumber(offset)\n    this.data = data\n  }\n\n  static fromContents (reader: Reader): StreamDataFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const offset = reader.readVarUIntBigNum()\n    const data = reader.readVarOctetString()\n    return new StreamDataFrame(streamId, offset, data)\n  }\n\n  // Leave out the data because that may be very long\n  toJSON (): Object {\n    return {\n      type: this.type,\n      name: this.name,\n      streamId: this.streamId,\n      offset: this.offset,\n      dataLength: this.data.length\n    }\n  }\n}\n\nexport class StreamMaxDataFrame extends BaseFrame {\n  type: FrameType.StreamMaxData\n  streamId: BigNumber\n  maxOffset: BigNumber\n\n  constructor (streamId: BigNumber.Value, maxOffset: BigNumber.Value) {\n    super('StreamMaxData')\n    this.streamId = new BigNumber(streamId)\n    this.maxOffset = new BigNumber(maxOffset)\n  }\n\n  static fromContents (reader: Reader): StreamMaxDataFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const maxOffset = reader.readVarUIntBigNum()\n    return new StreamMaxDataFrame(streamId, maxOffset)\n  }\n}\n\nexport class StreamDataBlockedFrame extends BaseFrame {\n  type: FrameType.StreamDataBlocked\n  streamId: BigNumber\n  maxOffset: BigNumber\n\n  constructor (streamId: BigNumber.Value, maxOffset: BigNumber.Value) {\n    super('StreamDataBlocked')\n    this.streamId = new BigNumber(streamId)\n    this.maxOffset = new BigNumber(maxOffset)\n  }\n\n  static fromContents (reader: Reader): StreamDataBlockedFrame {\n    const streamId = reader.readVarUIntBigNum()\n    const maxOffset = reader.readVarUIntBigNum()\n    return new StreamDataBlockedFrame(streamId, maxOffset)\n  }\n}\n\nfunction parseFrame (reader: Reader): Frame | undefined {\n  const type = reader.readUInt8BigNum().toNumber()\n  const contents = Reader.from(reader.readVarOctetString())\n\n  switch (type) {\n    case FrameType.ConnectionClose:\n      return ConnectionCloseFrame.fromContents(contents)\n    case FrameType.ConnectionNewAddress:\n      return ConnectionNewAddressFrame.fromContents(contents)\n    case FrameType.ConnectionAssetDetails:\n      return ConnectionAssetDetailsFrame.fromContents(contents)\n    case FrameType.ConnectionMaxData:\n      return ConnectionMaxDataFrame.fromContents(contents)\n    case FrameType.ConnectionDataBlocked:\n      return ConnectionDataBlockedFrame.fromContents(contents)\n    case FrameType.ConnectionMaxStreamId:\n      return ConnectionMaxStreamIdFrame.fromContents(contents)\n    case FrameType.ConnectionStreamIdBlocked:\n      return ConnectionStreamIdBlockedFrame.fromContents(contents)\n    case FrameType.StreamClose:\n      return StreamCloseFrame.fromContents(contents)\n    case FrameType.StreamMoney:\n      return StreamMoneyFrame.fromContents(contents)\n    case FrameType.StreamMaxMoney:\n      return StreamMaxMoneyFrame.fromContents(contents)\n    case FrameType.StreamMoneyBlocked:\n      return StreamMoneyBlockedFrame.fromContents(contents)\n    case FrameType.StreamData:\n      return StreamDataFrame.fromContents(contents)\n    case FrameType.StreamMaxData:\n      return StreamMaxDataFrame.fromContents(contents)\n    case FrameType.StreamDataBlocked:\n      return StreamDataBlockedFrame.fromContents(contents)\n    default:\n      return undefined\n  }\n}\n"]}