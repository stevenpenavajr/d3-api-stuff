{"version":3,"file":"data-queue.js","sourceRoot":"","sources":["data-queue.ts"],"names":[],"mappings":"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","sourcesContent":["// Inspired by https://github.com/toajs/quic/blob/master/src/stream.ts\n\n/** @private */\nexport class DataQueueEntry {\n  data: Buffer\n  next?: DataQueueEntry\n  callback?: () => void\n  constructor (buf: Buffer, callback?: () => void, entry?: DataQueueEntry) {\n    this.data = buf\n    this.callback = callback\n    this.next = entry\n  }\n}\n\n/** @private */\nexport class DataQueue {\n  head?: DataQueueEntry\n  tail?: DataQueueEntry\n  length: number\n  constructor () {\n    this.length = 0\n  }\n\n  push (buf: Buffer, callback?: () => void): void {\n    const entry = new DataQueueEntry(buf, callback)\n\n    if (this.tail) {\n      this.tail.next = entry\n    } else {\n      this.head = entry\n    }\n    this.tail = entry\n    this.length += 1\n  }\n\n  shift () {\n    if (!this.head) {\n      return null\n    }\n    const ret = this.head.data\n    if (this.length === 1) {\n      this.head = this.tail = undefined\n    } else {\n      this.head = this.head.next\n    }\n    this.length -= 1\n    return ret\n  }\n\n  read (n: number): Buffer | undefined {\n    if (!this.head) {\n      return undefined\n    }\n\n    let bytesLeft = n\n    const chunks: Buffer[] = []\n    while (bytesLeft > 0 && this.length > 0) {\n      let chunk = this.head.data\n      if (chunk.length > bytesLeft) {\n        this.head.data = chunk.slice(bytesLeft)\n        chunk = chunk.slice(0, bytesLeft)\n        chunks.push(chunk)\n        bytesLeft -= chunk.length\n      } else {\n        chunks.push(chunk) // ret.length <= n\n        bytesLeft -= chunk.length\n        if (this.head && this.head.callback) {\n          this.head.callback()\n        }\n        this.shift()\n      }\n    }\n\n    return Buffer.concat(chunks)\n  }\n\n  isEmpty (): boolean {\n    return this.length === 0\n  }\n\n  byteLength (): number {\n    let length = 0\n    let entry = this.head\n    while (entry) {\n      length += entry.data.length\n      entry = entry.next\n    }\n    return length\n  }\n}\n"]}