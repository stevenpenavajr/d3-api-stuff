/// <reference types="node" />
import BaseError = require('extensible-error');
export declare const codes: {
    F00_BAD_REQUEST: string;
    F01_INVALID_PACKET: string;
    F02_UNREACHABLE: string;
    F03_INVALID_AMOUNT: string;
    F04_INSUFFICIENT_DESTINATION_AMOUNT: string;
    F05_WRONG_CONDITION: string;
    F06_UNEXPECTED_PAYMENT: string;
    F07_CANNOT_RECEIVE: string;
    F08_AMOUNT_TOO_LARGE: string;
    F99_APPLICATION_ERROR: string;
    T00_INTERNAL_ERROR: string;
    T01_PEER_UNREACHABLE: string;
    T02_PEER_BUSY: string;
    T03_CONNECTOR_BUSY: string;
    T04_INSUFFICIENT_LIQUIDITY: string;
    T05_RATE_LIMITED: string;
    T99_APPLICATION_ERROR: string;
    R00_TRANSFER_TIMED_OUT: string;
    R01_INSUFFICIENT_SOURCE_AMOUNT: string;
    R02_INSUFFICIENT_TIMEOUT: string;
    R99_APPLICATION_ERROR: string;
};
export declare class BadRequestError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class InvalidPacketError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class UnreachableError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class InvalidAmountError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class InsufficientDestinationAmountError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class WrongConditionError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class UnexpectedPaymentError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class CannotReceiveError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export interface AmountTooLargeErrorOpts {
    receivedAmount: string;
    maximumAmount: string;
}
export declare class AmountTooLargeError extends BaseError {
    ilpErrorCode: string;
    ilpErrorData: Buffer;
    constructor(message: string, opts: AmountTooLargeErrorOpts);
}
export declare class FinalApplicationError extends BaseError {
    ilpErrorCode: string;
    ilpErrorData: Buffer;
    constructor(message: string, data: Buffer);
}
export declare class InternalError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class PeerUnreachableError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class PeerBusyError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class ConnectorBusyError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class InsufficientLiquidityError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class RateLimitedError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class TemporaryApplicationError extends BaseError {
    ilpErrorCode: string;
    ilpErrorData: Buffer;
    constructor(message: string, data: Buffer);
}
export declare class TransferTimedOutError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class InsufficientSourceAmountError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class InsufficientTimeoutError extends BaseError {
    ilpErrorCode: string;
    constructor(message: string);
}
export declare class RelativeApplicationError extends BaseError {
    ilpErrorCode: string;
    ilpErrorData: Buffer;
    constructor(message: string, data: Buffer);
}
