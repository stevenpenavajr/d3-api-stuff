/// <reference types="node" />
import * as errors from './src/errors';
export declare const Errors: typeof errors;
export declare enum Type {
    TYPE_ILP_PREPARE = 12,
    TYPE_ILP_FULFILL = 13,
    TYPE_ILP_REJECT = 14
}
export interface IlpErrorClass {
    message: string;
    ilpErrorCode?: string;
    ilpErrorData?: Buffer;
}
export declare const errorToReject: (address: string, error: IlpErrorClass) => Buffer;
export declare const serializeEnvelope: (type: number, contents: Buffer) => Buffer;
export declare const deserializeEnvelope: (binary: Buffer) => {
    type: string;
    contents: Buffer;
};
export interface IlpPacket {
    type: Type;
    data: any;
}
export interface IlpPrepare {
    amount: string;
    executionCondition: Buffer;
    expiresAt: Date;
    destination: string;
    data: Buffer;
}
export declare const serializeIlpPrepare: (json: IlpPrepare) => Buffer;
export declare const deserializeIlpPrepare: (binary: Buffer) => IlpPrepare;
export interface IlpFulfill {
    fulfillment: Buffer;
    data: Buffer;
}
export declare const serializeIlpFulfill: (json: IlpFulfill) => Buffer;
export declare const deserializeIlpFulfill: (binary: Buffer) => IlpFulfill;
export interface IlpReject {
    code: string;
    triggeredBy: string;
    message: string;
    data: Buffer;
}
export declare const serializeIlpReject: (json: IlpReject) => Buffer;
export declare const deserializeIlpReject: (binary: Buffer) => IlpReject;
export declare const serializeIlpPacket: (obj: IlpPacket) => Buffer;
export declare const deserializeIlpPacket: (binary: Buffer) => {
    type: number;
    typeString: string;
    data: IlpPrepare | IlpFulfill | IlpReject;
};
