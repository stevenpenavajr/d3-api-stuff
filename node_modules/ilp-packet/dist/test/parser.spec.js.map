{"version":3,"file":"parser.spec.js","sourceRoot":"","sources":["../../test/parser.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai'\n\nimport loadTests from './helpers/loadTests'\n\nconst Parser = require('..')\n\ndescribe('Parser', function () {\n  describe('serializeIlpPrepare', function () {\n    describe('correctly serializes valid ilp prepare', function () {\n      const validTests = loadTests({ type: 'ilp_prepare' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n          json.executionCondition = Buffer.from(json.executionCondition, 'base64')\n          json.expiresAt = new Date(json.expiresAt)\n\n          const serialized = Parser.serializeIlpPrepare(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpPrepare', function () {\n    describe('correctly parses valid ilp prepare', function () {\n      const validTests = loadTests({ type: 'ilp_prepare' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = Buffer.from(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpPrepare(binary)\n\n          parsed.data = parsed.data.toString('base64')\n          parsed.executionCondition = parsed.executionCondition.toString('base64')\n          parsed.expiresAt = parsed.expiresAt.toISOString()\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpFulfill', function () {\n    describe('correctly serializes valid ilp fulfill', function () {\n      const validTests = loadTests({ type: 'ilp_fulfill' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n          json.fulfillment = Buffer.from(json.fulfillment, 'base64')\n\n          const serialized = Parser.serializeIlpFulfill(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpFulfill', function () {\n    describe('correctly parses valid ilp fulfill', function () {\n      const validTests = loadTests({ type: 'ilp_fulfill' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = Buffer.from(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpFulfill(binary)\n\n          parsed.fulfillment = parsed.fulfillment.toString('base64')\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpReject', function () {\n    describe('correctly serializes valid ilp reject', function () {\n      const validTests = loadTests({ type: 'ilp_reject' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n\n          const serialized = Parser.serializeIlpReject(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpReject', function () {\n    describe('correctly parses valid ilp reject', function () {\n      const validTests = loadTests({ type: 'ilp_reject' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = Buffer.from(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpReject(binary)\n\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpPacket', function () {\n    describe('correctly parses valid ilp packets', function () {\n      testPackets('ilp_fulfill', Parser.Type.TYPE_ILP_FULFILL)\n      testPackets('ilp_prepare', Parser.Type.TYPE_ILP_PREPARE)\n      testPackets('ilp_reject', Parser.Type.TYPE_ILP_REJECT)\n\n      function testPackets (typeString: string, type: number) {\n        const validTests = loadTests({ type: typeString })\n        for (let test of validTests) {\n          it('parses ' + typeString + ': ' + test.name, function () {\n            const binary = Buffer.from(test.binary, 'hex')\n            const parsed = Parser.deserializeIlpPacket(binary)\n            if (typeString === 'ilp_prepare' || typeString === 'ilp_fulfill' || typeString === 'ilp_reject') {\n              parsed.data.data = parsed.data.data.toString('base64')\n            }\n            if (typeString === 'ilp_prepare') {\n              parsed.data.expiresAt = parsed.data.expiresAt.toISOString()\n              parsed.data.executionCondition = parsed.data.executionCondition.toString('base64')\n            }\n            if (typeString === 'ilp_fulfill') {\n              parsed.data.fulfillment = parsed.data.fulfillment.toString('base64')\n            }\n            assert.deepEqual(parsed, { type, typeString, data: test.json })\n          })\n        }\n      }\n    })\n  })\n})\n"]}