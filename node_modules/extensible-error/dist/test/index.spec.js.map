{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../test/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import chai = require('chai')\nimport ExtensibleError = require('../src')\nconst assert = chai.assert\n\nconst blowUp = () => { throw new ExtensibleError('It went bad!') }\n\ndescribe('ExtensibleError', function () {\n  it('should be a constructor', function () {\n    assert.isFunction(ExtensibleError)\n  })\n\n  describe('instance', function () {\n    beforeEach(function () {\n      try {\n        blowUp()\n      } catch (err) {\n        this.err = err\n      }\n    })\n\n    it('should have a name property', function () {\n      assert.equal(this.err.name, 'ExtensibleError')\n    })\n\n    it('should be an instance of ExtensibleError', function () {\n      assert.instanceOf(this.err, ExtensibleError)\n    })\n\n    it('should be an instance of Error', function () {\n      assert.instanceOf(this.err, Error)\n    })\n\n    it('should be recognized by Node\\'s util.isError', function () {\n      assert.ok(require('util').isError(this.err))\n    })\n\n    describe('toString', function () {\n      it('should return a properly formatted message', function () {\n        assert.equal(this.err.toString(), 'ExtensibleError: It went bad!')\n      })\n    })\n\n    describe('stack', function () {\n      it('should be a string', function () {\n        assert.isString(this.err.stack)\n      })\n\n      it('should start with the default error message formatting', function () {\n        assert.strictEqual(\n          this.err.stack.split('\\n')[0],\n          'ExtensibleError: It went bad!'\n        )\n      })\n\n      it('should contain the stack frame with the function that threw in the first slot', function () {\n        assert.strictEqual(this.err.stack.split('\\n')[1].indexOf('blowUp'), 7)\n      })\n    })\n  })\n\n  describe('subclass', function () {\n    beforeEach(function () {\n      this.CustomError = class CustomError extends ExtensibleError {\n        extra: number\n\n        constructor (message: string, extra: number) {\n          super(message)\n\n          this.extra = extra\n        }\n      }\n    })\n\n    it('should be a constructor', function () {\n      assert.isFunction(this.CustomError)\n    })\n\n    describe('instance', function () {\n      beforeEach(function () {\n        const CustomError = this.CustomError\n\n        function boom () {\n          throw new CustomError('Not great!', 42)\n        }\n\n        try {\n          boom()\n        } catch (err) {\n          this.err = err\n        }\n      })\n\n      it('should have a name property', function () {\n        assert.equal(this.err.name, 'CustomError')\n      })\n\n      it('should be an instance of ExtensibleError', function () {\n        assert.instanceOf(this.err, ExtensibleError)\n      })\n\n      it('should be an instance of Error', function () {\n        assert.instanceOf(this.err, Error)\n      })\n\n      it('should be recognized by Node\\'s util.isError', function () {\n        assert.ok(require('util').isError(this.err))\n      })\n\n      describe('toString', function () {\n        it('should return a properly formatted message', function () {\n          assert.equal(this.err.toString(), 'CustomError: Not great!')\n        })\n      })\n\n      describe('stack', function () {\n        it('should be a string', function () {\n          assert.isString(this.err.stack)\n        })\n\n        it('should start with the default error message formatting', function () {\n          assert.strictEqual(\n            this.err.stack.split('\\n')[0],\n            'CustomError: Not great!'\n          )\n        })\n\n        it('should contain the stack frame with the function that threw in the first slot', function () {\n          assert.strictEqual(this.err.stack.split('\\n')[1].indexOf('boom'), 7)\n        })\n      })\n    })\n  })\n})\n"]}