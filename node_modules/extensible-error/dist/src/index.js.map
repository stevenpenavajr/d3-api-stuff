{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAWA,qBAAsB,SAAQ,KAAK;IACjC,YAAa,OAAe;QAC1B,KAAK,EAAE,CAAA;QAGP,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;YACrC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,OAAO,KAAK,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;SACpD,CAAC,CAAA;QAGF,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;YAClC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;SAC7B,CAAC,CAAA;QAEF,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,iBAAiB,KAAK,UAAU,CAAC,CAAC,CAAC;YAElD,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QACjD,CAAC;IACH,CAAC;CACF;AAED,iBAAS,eAAe,CAAA","sourcesContent":["/**\n * Extensible error class.\n *\n * The built-in Error class is not actually a constructor, but a factory. It\n * doesn't operate on `this`, so if we call it as `super()` it doesn't do\n * anything useful.\n *\n * Nonetheless it does create objects that are instanceof Error. In order to\n * easily subclass error we need our own base class which mimics that behavior\n * but with a true constructor.\n */\nclass ExtensibleError extends Error {\n  constructor (message: string) {\n    super()\n\n    // Set this.message\n    Object.defineProperty(this, 'message', {\n      configurable: true,\n      enumerable: false,\n      value: message !== undefined ? String(message) : ''\n    })\n\n    // Set this.name\n    Object.defineProperty(this, 'name', {\n      configurable: true,\n      enumerable: false,\n      value: this.constructor.name\n    })\n\n    if (typeof Error.captureStackTrace === 'function') {\n      // Set this.stack\n      Error.captureStackTrace(this, this.constructor)\n    }\n  }\n}\n\nexport = ExtensibleError\n"]}