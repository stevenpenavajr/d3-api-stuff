{"version":3,"file":"predictor.js","sourceRoot":"","sources":["../../../src/lib/predictor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isInteger } from './util'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Writable stream which tracks the amount of data written.\n *\n * This class acts as a writable stream, but only does the minimum amount of\n * work necessary to count/predict the output size.\n */\nclass Predictor {\n  size: number\n  components: Buffer[]\n\n  constructor () {\n    this.size = 0\n    this.components = []\n  }\n\n  /**\n   * Add the size of a fixed-length unsigned integer to the predicted size.\n   */\n  writeUInt (value: BigNumber.Value, length: number) {\n    this.size += length\n  }\n\n  /**\n   * Add the size of a fixed-length integer to the predicted size.\n   */\n  writeInt (value: BigNumber.Value, length: number) {\n    this.size += length\n  }\n\n  /**\n   * Calculate the size of a variable-length unsigned integer.\n   */\n  writeVarUInt (_value: BigNumber.Value) {\n    if (!isInteger(_value)) {\n      throw new Error('UInt must be an integer')\n    }\n    const value = new BigNumber(_value)\n\n    if (value.isNegative()) {\n      throw new Error('UInt must be positive')\n    }\n\n    const lengthOfValue = Math.ceil(value.toString(16).length / 2)\n    this.skipVarOctetString(lengthOfValue)\n  }\n\n  /**\n   * Calculate the size of a variable-length integer.\n   */\n  writeVarInt (_value: BigNumber.Value) {\n    if (!isInteger(_value)) {\n      throw new Error('UInt must be an integer')\n    }\n    const value = new BigNumber(_value)\n\n    const lengthOfValue = Math.ceil(value.toString(16).length / 2)\n    this.skipVarOctetString(lengthOfValue)\n  }\n\n  /**\n   * Skip bytes for a fixed-length octet string.\n   */\n  writeOctetString (buffer: Buffer, length: number) {\n    this.skip(length)\n  }\n\n  /**\n   * Calculate the size of a variable-length octet string.\n   */\n  writeVarOctetString (buffer: Buffer) {\n    this.skipVarOctetString(buffer.length)\n  }\n\n  /**\n   * Pretend to write a series of bytes.\n   *\n   * @param {Buffer} Bytes to write.\n   */\n  write (bytes: Buffer) {\n    this.size += bytes.length\n  }\n\n  /**\n   * Add this many bytes to the predicted size.\n   *\n   * @param {Number} Number of bytes to pretend to write.\n   */\n  skip (bytes: number) {\n    this.size += bytes\n  }\n\n  /**\n   * Get the size the buffer would have if this was a real writer.\n   *\n   * @return {Number} Size in bytes.\n   */\n  getSize () {\n    return this.size\n  }\n\n  /**\n   * Dummy function just to mimic Writer API\n   */\n  getBuffer (): Buffer {\n    return Buffer.alloc(0)\n  }\n\n  private skipVarOctetString (length: number) {\n    // Skip initial byte\n    this.skip(1)\n\n    // Skip separate length field if there is one\n    if (length > 127) {\n      const lengthOfLength = Math.ceil(length.toString(2).length / 8)\n      this.skip(lengthOfLength)\n    }\n\n    this.skip(length)\n  }\n}\n\ninterface Predictor {\n  writeUInt8 (value: number): undefined\n  writeUInt16 (value: number): undefined\n  writeUInt32 (value: number): undefined\n  writeUInt64 (value: number): undefined\n  writeInt8 (value: number): undefined\n  writeInt16 (value: number): undefined\n  writeInt32 (value: number): undefined\n  writeInt64 (value: number): undefined\n}\n\n// Create writeUInt{8,16,32,64} shortcuts\n[1, 2, 4, 8].forEach((bytes) => {\n  Predictor.prototype['writeUInt' + bytes * 8] = function (value: number) {\n    return this.writeUInt(value, bytes)\n  }\n\n  Predictor.prototype['writeInt' + bytes * 8] = function (value: number) {\n    return this.writeUInt(value, bytes)\n  }\n})\n\nexport default Predictor\n"]}