"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var bignumber_js_1 = require("bignumber.js");
var Writer = (function () {
    function Writer() {
        this.components = [];
    }
    Writer.prototype.writeUInt = function (_value, length) {
        if (Array.isArray(_value)) {
            this.writeUInt32(_value[0]);
            this.writeUInt32(_value[1]);
            return;
        }
        if (!util_1.isInteger(_value)) {
            throw new Error('UInt must be an integer');
        }
        else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('UInt is larger than safe JavaScript range (try using BigNumbers instead)');
        }
        else if (length <= 0) {
            throw new Error('UInt length must be greater than zero');
        }
        if (length <= util_1.MAX_SAFE_BYTES) {
            var value = Number(_value);
            if (value < 0) {
                throw new Error('UInt must be positive');
            }
            else if (value > Writer.UINT_RANGES[length]) {
                throw new Error("UInt " + value + " does not fit in " + length + " bytes");
            }
            var buffer = Buffer.alloc(length);
            buffer.writeUIntBE(value, 0, length);
            this.write(buffer);
        }
        else {
            var value = new bignumber_js_1.default(_value);
            if (value.isLessThan(0)) {
                throw new Error('UInt must be positive');
            }
            else if (value.isGreaterThan(Writer.UINT_RANGES[length])) {
                throw new Error("UInt " + value + " does not fit in " + length + " bytes");
            }
            this.write(util_1.bigNumberToBuffer(value, length));
        }
    };
    Writer.prototype.writeInt = function (_value, length) {
        if (!util_1.isInteger(_value)) {
            throw new Error('Int must be an integer');
        }
        else if (length <= 0) {
            throw new Error('Int length must be greater than zero');
        }
        else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('Int is larger than safe JavaScript range (try using BigNumbers instead)');
        }
        else if (typeof _value === 'number' && _value < Writer.MIN_SAFE_INTEGER) {
            throw new Error('Int is smaller than safe JavaScript range (try using BigNumbers instead)');
        }
        if (length <= util_1.MAX_SAFE_BYTES) {
            var value = Number(_value);
            if (value < Writer.INT_RANGES[length][0] || value > Writer.INT_RANGES[length][1]) {
                throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes');
            }
            var buffer = Buffer.alloc(length);
            buffer.writeIntBE(value, 0, length);
            this.write(buffer);
        }
        else {
            var value = new bignumber_js_1.default(_value);
            if (value.isLessThan(Writer.INT_RANGES[length][0]) ||
                value.isGreaterThan(Writer.INT_RANGES[length][1])) {
                throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes');
            }
            var valueToWrite = value.isLessThan(0) ? new bignumber_js_1.default(256).exponentiatedBy(length).plus(value) : value;
            this.write(util_1.bigNumberToBuffer(valueToWrite, length));
        }
    };
    Writer.prototype.writeVarUInt = function (_value) {
        if (Buffer.isBuffer(_value)) {
            this.writeVarOctetString(_value);
            return;
        }
        else if (!util_1.isInteger(_value)) {
            throw new Error('UInt must be an integer');
        }
        if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('UInt is larger than safe JavaScript range');
        }
        var value = new bignumber_js_1.default(_value);
        if (value.isLessThan(0)) {
            throw new Error('UInt must be positive');
        }
        this.writeVarOctetString(util_1.bigNumberToBuffer(value));
    };
    Writer.prototype.writeVarInt = function (_value) {
        if (Buffer.isBuffer(_value)) {
            this.writeVarOctetString(_value);
            return;
        }
        else if (!util_1.isInteger(_value)) {
            throw new Error('Int must be an integer');
        }
        else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {
            throw new Error('Int is larger than safe JavaScript range');
        }
        else if (typeof _value === 'number' && _value < Writer.MIN_SAFE_INTEGER) {
            throw new Error('Int is smaller than safe JavaScript range');
        }
        var value = new bignumber_js_1.default(_value);
        var lengthDeterminingValue = value.isLessThan(0) ? new bignumber_js_1.default(1).minus(value) : value;
        var lengthOfValue = Math.ceil((lengthDeterminingValue.toString(2).length + 1) / 8);
        var valueToWrite = value.isLessThan(0) ? new bignumber_js_1.default(256).exponentiatedBy(lengthOfValue).plus(value) : value;
        this.writeVarOctetString(util_1.bigNumberToBuffer(valueToWrite, lengthOfValue));
    };
    Writer.prototype.writeOctetString = function (buffer, length) {
        if (buffer.length !== length) {
            throw new Error('Incorrect length for octet string (actual: ' +
                buffer.length + ', expected: ' + length + ')');
        }
        this.write(buffer);
    };
    Writer.prototype.writeVarOctetString = function (buffer) {
        if (!Buffer.isBuffer(buffer)) {
            throw new TypeError('Expects a buffer');
        }
        var MSB = 0x80;
        if (buffer.length <= 127) {
            this.writeUInt8(buffer.length);
        }
        else {
            var lengthOfLength = Math.ceil(buffer.length.toString(2).length / 8);
            this.writeUInt8(MSB | lengthOfLength);
            this.writeUInt(buffer.length, lengthOfLength);
        }
        this.write(buffer);
    };
    Writer.prototype.write = function (buffer) {
        this.components.push(buffer);
    };
    Writer.prototype.getBuffer = function () {
        return Buffer.concat(this.components);
    };
    Writer.MAX_SAFE_INTEGER = 0x1fffffffffffff;
    Writer.MIN_SAFE_INTEGER = -0x1fffffffffffff;
    Writer.UINT_RANGES = {
        1: 0xff,
        2: 0xffff,
        3: 0xffffff,
        4: 0xffffffff,
        5: 0xffffffffff,
        6: 0xffffffffffff,
        8: new bignumber_js_1.default('ffffffffffffffff', 16)
    };
    Writer.INT_RANGES = {
        1: [-0x80, 0x7f],
        2: [-0x8000, 0x7fff],
        3: [-0x800000, 0x7fffff],
        4: [-0x80000000, 0x7fffffff],
        5: [-0x8000000000, 0x7fffffffff],
        6: [-0x800000000000, 0x7fffffffffff],
        8: [new bignumber_js_1.default('-80000000000000', 16), new bignumber_js_1.default('7fffffffffffff', 16)]
    };
    return Writer;
}());
[1, 2, 4, 8].forEach(function (bytes) {
    Writer.prototype['writeUInt' + bytes * 8] = function (value) {
        this.writeUInt(value, bytes);
    };
    Writer.prototype['writeInt' + bytes * 8] = function (value) {
        this.writeInt(value, bytes);
    };
});
exports.default = Writer;
//# sourceMappingURL=writer.js.map