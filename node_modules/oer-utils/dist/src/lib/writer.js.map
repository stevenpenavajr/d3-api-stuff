{"version":3,"file":"writer.js","sourceRoot":"","sources":["../../../src/lib/writer.ts"],"names":[],"mappings":";;AAAA,+BAAqE;AACrE,6CAAoC;AAEpC;IA2BE;QACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAA;IACtB,CAAC;IAQD,0BAAS,GAAT,UAAW,MAAkC,EAAE,MAAc;QAC3D,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;YAC3B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;YAC3B,OAAM;SACP;QACD,IAAI,CAAC,gBAAS,CAAC,MAAM,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;SAC3C;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE;YACzE,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAA;SAC5F;aAAM,IAAI,MAAM,IAAI,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;SACzD;QAED,IAAI,MAAM,IAAI,qBAAc,EAAE;YAC5B,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;YAC5B,IAAI,KAAK,GAAG,CAAC,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;aACzC;iBAAM,IAAI,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC7C,MAAM,IAAI,KAAK,CAAC,UAAQ,KAAK,yBAAoB,MAAM,WAAQ,CAAC,CAAA;aACjE;YAED,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;YACnC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAA;YACpC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;SACnB;aAAM;YACL,IAAM,KAAK,GAAG,IAAI,sBAAS,CAAC,MAAM,CAAC,CAAA;YACnC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;aACzC;iBAAM,IAAI,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE;gBAC1D,MAAM,IAAI,KAAK,CAAC,UAAQ,KAAK,yBAAoB,MAAM,WAAQ,CAAC,CAAA;aACjE;YAED,IAAI,CAAC,KAAK,CAAC,wBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;SAC7C;IACH,CAAC;IAQD,yBAAQ,GAAR,UAAU,MAAuB,EAAE,MAAc;QAC/C,IAAI,CAAC,gBAAS,CAAC,MAAM,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;SAC1C;aAAM,IAAI,MAAM,IAAI,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;SACxD;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE;YACzE,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAA;SAC3F;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE;YACzE,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAA;SAC5F;QAED,IAAI,MAAM,IAAI,qBAAc,EAAE;YAC5B,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;YAC5B,IAAI,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;gBAChF,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG,mBAAmB,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAA;aAC1E;YAED,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;YACnC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAA;YACnC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;SACnB;aAAM;YACL,IAAM,KAAK,GAAG,IAAI,sBAAS,CAAC,MAAM,CAAC,CAAA;YACnC,IACE,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACjD;gBACA,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG,mBAAmB,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAA;aAC1E;YAED,IAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,sBAAS,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;YACzG,IAAI,CAAC,KAAK,CAAC,wBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAA;SACpD;IACH,CAAC;IAUD,6BAAY,GAAZ,UAAc,MAAgC;QAC5C,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAG3B,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;YAChC,OAAM;SACP;aAAM,IAAI,CAAC,gBAAS,CAAC,MAAM,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;SAC3C;QACD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE;YAClE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;SAC7D;QACD,IAAM,KAAK,GAAG,IAAI,sBAAS,CAAC,MAAM,CAAC,CAAA;QACnC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;SACzC;QAED,IAAI,CAAC,mBAAmB,CAAC,wBAAiB,CAAC,KAAK,CAAC,CAAC,CAAA;IACpD,CAAC;IAUD,4BAAW,GAAX,UAAa,MAAgC;QAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAG3B,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;YAChC,OAAM;SACP;aAAM,IAAI,CAAC,gBAAS,CAAC,MAAM,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;SAC1C;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE;YACzE,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAA;SAC5D;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE;YACzE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;SAC7D;QACD,IAAM,KAAK,GAAG,IAAI,sBAAS,CAAC,MAAM,CAAC,CAAA;QAEnC,IAAM,sBAAsB,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,sBAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QAC1F,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QACpF,IAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,sBAAS,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QAChH,IAAI,CAAC,mBAAmB,CAAC,wBAAiB,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAA;IAC1E,CAAC;IAWD,iCAAgB,GAAhB,UAAkB,MAAc,EAAE,MAAc;QAC9C,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,6CAA6C;gBAC3D,MAAM,CAAC,MAAM,GAAG,cAAc,GAAG,MAAM,GAAG,GAAG,CAAC,CAAA;SACjD;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IACpB,CAAC;IASD,oCAAmB,GAAnB,UAAqB,MAAc;QACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC5B,MAAM,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAA;SACxC;QAED,IAAM,GAAG,GAAG,IAAI,CAAA;QAEhB,IAAI,MAAM,CAAC,MAAM,IAAI,GAAG,EAAE;YAGxB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;SAC/B;aAAM;YAIL,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;YACtE,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,cAAc,CAAC,CAAA;YAGrC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;SAC9C;QAED,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IACpB,CAAC;IASD,sBAAK,GAAL,UAAO,MAAc;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC9B,CAAC;IAMD,0BAAS,GAAT;QAKE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IACvC,CAAC;IA/OM,uBAAgB,GAAW,gBAAgB,CAAA;IAC3C,uBAAgB,GAAW,CAAC,gBAAgB,CAAA;IAE5C,kBAAW,GAAG;QACnB,CAAC,EAAE,IAAI;QACP,CAAC,EAAE,MAAM;QACT,CAAC,EAAE,QAAQ;QACX,CAAC,EAAE,UAAU;QACb,CAAC,EAAE,YAAY;QACf,CAAC,EAAE,cAAc;QACjB,CAAC,EAAE,IAAI,sBAAS,CAAC,kBAAkB,EAAE,EAAE,CAAC;KACzC,CAAA;IAEM,iBAAU,GAAG;QAClB,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC;QAChB,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC;QACpB,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACxB,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5B,CAAC,EAAE,CAAC,CAAC,YAAY,EAAE,YAAY,CAAC;QAChC,CAAC,EAAE,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC;QACpC,CAAC,EAAE,CAAC,IAAI,sBAAS,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAE,IAAI,sBAAS,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC/E,CAAA;IA2NH,aAAC;CAAA,AAlPD,IAkPC;AAcD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK;IACzB,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,UAAU,KAAa;QACjE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAC9B,CAAC,CAAA;IAED,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,UAAU,KAAa;QAChE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAC7B,CAAC,CAAA;AACH,CAAC,CAAC,CAAA;AAEF,kBAAe,MAAM,CAAA","sourcesContent":["import { isInteger, bigNumberToBuffer, MAX_SAFE_BYTES } from './util'\nimport BigNumber from 'bignumber.js'\n\nclass Writer {\n  // Largest value that can be written as a variable-length unsigned integer\n  static MAX_SAFE_INTEGER: number = 0x1fffffffffffff\n  static MIN_SAFE_INTEGER: number = -0x1fffffffffffff\n\n  static UINT_RANGES = {\n    1: 0xff,\n    2: 0xffff,\n    3: 0xffffff,\n    4: 0xffffffff,\n    5: 0xffffffffff,\n    6: 0xffffffffffff,\n    8: new BigNumber('ffffffffffffffff', 16)\n  }\n\n  static INT_RANGES = {\n    1: [-0x80, 0x7f],\n    2: [-0x8000, 0x7fff],\n    3: [-0x800000, 0x7fffff],\n    4: [-0x80000000, 0x7fffffff],\n    5: [-0x8000000000, 0x7fffffffff],\n    6: [-0x800000000000, 0x7fffffffffff],\n    8: [new BigNumber('-80000000000000', 16), new BigNumber('7fffffffffffff', 16)]\n  }\n\n  components: Buffer[]\n\n  constructor () {\n    this.components = []\n  }\n\n  /**\n   * Write a fixed-length unsigned integer to the stream.\n   *\n   * @param {number | string | BigNumber} value Value to write. Must be in range for the given length.\n   * @param length Number of bytes to encode this value as.\n   */\n  writeUInt (_value: BigNumber.Value | number[], length: number): void {\n    if (Array.isArray(_value)) {\n      this.writeUInt32(_value[0])\n      this.writeUInt32(_value[1])\n      return\n    }\n    if (!isInteger(_value)) {\n      throw new Error('UInt must be an integer')\n    } else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('UInt is larger than safe JavaScript range (try using BigNumbers instead)')\n    } else if (length <= 0) {\n      throw new Error('UInt length must be greater than zero')\n    }\n\n    if (length <= MAX_SAFE_BYTES) {\n      const value = Number(_value)\n      if (value < 0) {\n        throw new Error('UInt must be positive')\n      } else if (value > Writer.UINT_RANGES[length]) {\n        throw new Error(`UInt ${value} does not fit in ${length} bytes`)\n      }\n\n      const buffer = Buffer.alloc(length)\n      buffer.writeUIntBE(value, 0, length)\n      this.write(buffer)\n    } else {\n      const value = new BigNumber(_value)\n      if (value.isLessThan(0)) {\n        throw new Error('UInt must be positive')\n      } else if (value.isGreaterThan(Writer.UINT_RANGES[length])) {\n        throw new Error(`UInt ${value} does not fit in ${length} bytes`)\n      }\n\n      this.write(bigNumberToBuffer(value, length))\n    }\n  }\n\n  /**\n   * Write a fixed-length signed integer to the stream.\n   *\n   * @param {number | string | BigNumber} value Value to write. Must be in range for the given length.\n   * @param length Number of bytes to encode this value as.\n   */\n  writeInt (_value: BigNumber.Value, length: number): void {\n    if (!isInteger(_value)) {\n      throw new Error('Int must be an integer')\n    } else if (length <= 0) {\n      throw new Error('Int length must be greater than zero')\n    } else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('Int is larger than safe JavaScript range (try using BigNumbers instead)')\n    } else if (typeof _value === 'number' && _value < Writer.MIN_SAFE_INTEGER) {\n      throw new Error('Int is smaller than safe JavaScript range (try using BigNumbers instead)')\n    }\n\n    if (length <= MAX_SAFE_BYTES) {\n      const value = Number(_value)\n      if (value < Writer.INT_RANGES[length][0] || value > Writer.INT_RANGES[length][1]) {\n        throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes')\n      }\n\n      const buffer = Buffer.alloc(length)\n      buffer.writeIntBE(value, 0, length)\n      this.write(buffer)\n    } else {\n      const value = new BigNumber(_value)\n      if (\n        value.isLessThan(Writer.INT_RANGES[length][0]) ||\n        value.isGreaterThan(Writer.INT_RANGES[length][1])\n      ) {\n        throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes')\n      }\n\n      const valueToWrite = value.isLessThan(0) ? new BigNumber(256).exponentiatedBy(length).plus(value) : value\n      this.write(bigNumberToBuffer(valueToWrite, length))\n    }\n  }\n\n  /**\n   * Write a variable length unsigned integer to the stream.\n   *\n   * We need to first turn the integer into a buffer in big endian order, then\n   * we write the buffer as an octet string.\n   *\n   * @param {number | string | BigNumber | Buffer} value Integer to represent.\n   */\n  writeVarUInt (_value: BigNumber.Value | Buffer): void {\n    if (Buffer.isBuffer(_value)) {\n      // If the integer was already passed as a buffer, we can just treat it as\n      // an octet string.\n      this.writeVarOctetString(_value)\n      return\n    } else if (!isInteger(_value)) {\n      throw new Error('UInt must be an integer')\n    }\n    if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('UInt is larger than safe JavaScript range')\n    }\n    const value = new BigNumber(_value)\n    if (value.isLessThan(0)) {\n      throw new Error('UInt must be positive')\n    }\n\n    this.writeVarOctetString(bigNumberToBuffer(value))\n  }\n\n  /**\n   * Write a variable length signed integer to the stream.\n   *\n   * We need to first turn the integer into a buffer in big endian order, then\n   * we write the buffer as an octet string.\n   *\n   * @param {number | string | BigNumber | Buffer} value Integer to represent.\n   */\n  writeVarInt (_value: BigNumber.Value | Buffer): void {\n    if (Buffer.isBuffer(_value)) {\n      // If the integer was already passed as a buffer, we can just treat it as\n      // an octet string.\n      this.writeVarOctetString(_value)\n      return\n    } else if (!isInteger(_value)) {\n      throw new Error('Int must be an integer')\n    } else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('Int is larger than safe JavaScript range')\n    } else if (typeof _value === 'number' && _value < Writer.MIN_SAFE_INTEGER) {\n      throw new Error('Int is smaller than safe JavaScript range')\n    }\n    const value = new BigNumber(_value)\n\n    const lengthDeterminingValue = value.isLessThan(0) ? new BigNumber(1).minus(value) : value\n    const lengthOfValue = Math.ceil((lengthDeterminingValue.toString(2).length + 1) / 8)\n    const valueToWrite = value.isLessThan(0) ? new BigNumber(256).exponentiatedBy(lengthOfValue).plus(value) : value\n    this.writeVarOctetString(bigNumberToBuffer(valueToWrite, lengthOfValue))\n  }\n\n  /**\n   * Write a fixed-length octet string.\n   *\n   * Mostly just a raw write, but this method enforces the length of the\n   * provided buffer is correct.\n   *\n   * @param buffer Data to write.\n   * @param length Length of data according to the format.\n   */\n  writeOctetString (buffer: Buffer, length: number): void {\n    if (buffer.length !== length) {\n      throw new Error('Incorrect length for octet string (actual: ' +\n        buffer.length + ', expected: ' + length + ')')\n    }\n    this.write(buffer)\n  }\n\n  /**\n   * Write a variable-length octet string.\n   *\n   * A variable-length octet string is a length-prefixed set of arbitrary bytes.\n   *\n   * @param buffer Contents of the octet string.\n   */\n  writeVarOctetString (buffer: Buffer): void {\n    if (!Buffer.isBuffer(buffer)) {\n      throw new TypeError('Expects a buffer')\n    }\n\n    const MSB = 0x80\n\n    if (buffer.length <= 127) {\n      // For buffers shorter than 128 bytes, we simply prefix the length as a\n      // single byte.\n      this.writeUInt8(buffer.length)\n    } else {\n      // For buffers longer than 128 bytes, we first write a single byte\n      // containing the length of the length in bytes, with the most significant\n      // bit set.\n      const lengthOfLength = Math.ceil(buffer.length.toString(2).length / 8)\n      this.writeUInt8(MSB | lengthOfLength)\n\n      // Then we write the length of the buffer in that many bytes.\n      this.writeUInt(buffer.length, lengthOfLength)\n    }\n\n    this.write(buffer)\n  }\n\n  /**\n   * Write a series of raw bytes.\n   *\n   * Adds the given bytes to the output buffer.\n   *\n   * @param buffer Bytes to write.\n   */\n  write (buffer: Buffer): void {\n    this.components.push(buffer)\n  }\n\n  /**\n   * Returns the buffer containing the serialized data that was written using\n   * this writer.\n   */\n  getBuffer (): Buffer {\n    // ST: The following debug statement is very useful, so I finally decided to\n    // commit it...\n    // console.log(this.components.map((x) => x.toString('hex')).join(' '))\n\n    return Buffer.concat(this.components)\n  }\n}\n\ninterface Writer {\n  writeUInt8 (value: BigNumber.Value): undefined\n  writeUInt16 (value: BigNumber.Value): undefined\n  writeUInt32 (value: BigNumber.Value): undefined\n  writeUInt64 (value: BigNumber.Value | number[]): undefined\n  writeInt8 (value: BigNumber.Value): undefined\n  writeInt16 (value: BigNumber.Value): undefined\n  writeInt32 (value: BigNumber.Value): undefined\n  writeInt64 (value: BigNumber.Value): undefined\n}\n\n// Create write(U)Int{8,16,32,64} shortcuts\n[1, 2, 4, 8].forEach((bytes) => {\n  Writer.prototype['writeUInt' + bytes * 8] = function (value: number) {\n    this.writeUInt(value, bytes)\n  }\n\n  Writer.prototype['writeInt' + bytes * 8] = function (value: number) {\n    this.writeInt(value, bytes)\n  }\n})\n\nexport default Writer\n"]}