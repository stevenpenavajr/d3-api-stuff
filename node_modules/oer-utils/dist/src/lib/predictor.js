"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var bignumber_js_1 = require("bignumber.js");
var Predictor = (function () {
    function Predictor() {
        this.size = 0;
        this.components = [];
    }
    Predictor.prototype.writeUInt = function (value, length) {
        this.size += length;
    };
    Predictor.prototype.writeInt = function (value, length) {
        this.size += length;
    };
    Predictor.prototype.writeVarUInt = function (_value) {
        if (!util_1.isInteger(_value)) {
            throw new Error('UInt must be an integer');
        }
        var value = new bignumber_js_1.default(_value);
        if (value.isNegative()) {
            throw new Error('UInt must be positive');
        }
        var lengthOfValue = Math.ceil(value.toString(16).length / 2);
        this.skipVarOctetString(lengthOfValue);
    };
    Predictor.prototype.writeVarInt = function (_value) {
        if (!util_1.isInteger(_value)) {
            throw new Error('UInt must be an integer');
        }
        var value = new bignumber_js_1.default(_value);
        var lengthOfValue = Math.ceil(value.toString(16).length / 2);
        this.skipVarOctetString(lengthOfValue);
    };
    Predictor.prototype.writeOctetString = function (buffer, length) {
        this.skip(length);
    };
    Predictor.prototype.writeVarOctetString = function (buffer) {
        this.skipVarOctetString(buffer.length);
    };
    Predictor.prototype.write = function (bytes) {
        this.size += bytes.length;
    };
    Predictor.prototype.skip = function (bytes) {
        this.size += bytes;
    };
    Predictor.prototype.getSize = function () {
        return this.size;
    };
    Predictor.prototype.getBuffer = function () {
        return Buffer.alloc(0);
    };
    Predictor.prototype.skipVarOctetString = function (length) {
        this.skip(1);
        if (length > 127) {
            var lengthOfLength = Math.ceil(length.toString(2).length / 8);
            this.skip(lengthOfLength);
        }
        this.skip(length);
    };
    return Predictor;
}());
[1, 2, 4, 8].forEach(function (bytes) {
    Predictor.prototype['writeUInt' + bytes * 8] = function (value) {
        return this.writeUInt(value, bytes);
    };
    Predictor.prototype['writeInt' + bytes * 8] = function (value) {
        return this.writeUInt(value, bytes);
    };
});
exports.default = Predictor;
//# sourceMappingURL=predictor.js.map