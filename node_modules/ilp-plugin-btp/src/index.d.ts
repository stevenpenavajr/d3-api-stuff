/// <reference types="node" />
import * as WebSocket from 'ws';
import { WebSocketConstructor } from './ws-reconnect';
import { EventEmitter2 } from 'eventemitter2';
declare type DataHandler = (data: Buffer) => Promise<Buffer>;
declare type MoneyHandler = (amount: string) => Promise<void>;
export interface BtpPacket {
    requestId: number;
    type: number;
    data: BtpPacketData;
}
export interface BtpPacketData {
    protocolData: Array<BtpSubProtocol>;
    amount?: string;
    code?: string;
    name?: string;
    triggeredAt?: Date;
    data?: string;
}
export interface BtpSubProtocol {
    protocolName: string;
    contentType: number;
    data: Buffer;
}
export interface IlpPluginBtpConstructorOptions {
    server?: string;
    listener?: {
        port: number;
        secret: string;
    };
    reconnectInterval?: number;
    reconnectIntervals?: Array<number>;
    reconnectClearTryTimeout?: number;
    responseTimeout?: number;
    btpAccount?: string;
    btpToken?: string;
}
export interface WebSocketServerConstructor {
    new (opts: WebSocket.ServerOptions): WebSocket.Server;
}
export interface IlpPluginBtpConstructorModules {
    log?: any;
    WebSocket?: WebSocketConstructor;
    WebSocketServer?: WebSocketServerConstructor;
}
export default class AbstractBtpPlugin extends EventEmitter2 {
    static version: number;
    private _reconnectInterval?;
    private _reconnectIntervals?;
    private _reconnectClearTryTimeout?;
    private _responseTimeout;
    protected _dataHandler?: DataHandler;
    protected _moneyHandler?: MoneyHandler;
    private _readyState;
    protected _log: any;
    private WebSocket;
    private WebSocketServer;
    private _listener?;
    protected _wss: WebSocket.Server | null;
    private _incomingWs?;
    private _server?;
    private _btpToken?;
    private _btpAccount?;
    private _ws?;
    constructor(options: IlpPluginBtpConstructorOptions, modules?: IlpPluginBtpConstructorModules);
    protected _connect(...opts: any[]): Promise<void>;
    protected _disconnect(): Promise<void>;
    connect(): Promise<void>;
    _closeIncomingSocket(socket: WebSocket, authPacket: BtpPacket): void;
    disconnect(): Promise<void>;
    isConnected(): boolean;
    _handleIncomingWsMessage(ws: WebSocket, binaryMessage: WebSocket.Data): Promise<void>;
    sendData(buffer: Buffer): Promise<Buffer>;
    sendMoney(amount: string): Promise<void>;
    _safeEmit(): void;
    registerDataHandler(handler: DataHandler): void;
    deregisterDataHandler(): void;
    registerMoneyHandler(handler: MoneyHandler): void;
    deregisterMoneyHandler(): void;
    protocolDataToIlpAndCustom(packet: BtpPacketData): {
        protocolMap: {};
        ilp: any;
        custom: any;
    };
    ilpAndCustomToProtocolData(obj: {
        ilp?: Buffer;
        custom?: Object;
        protocolMap?: Map<string, Buffer | string | Object>;
    }): BtpSubProtocol[];
    protected _call(to: string, btpPacket: BtpPacket): Promise<BtpPacketData>;
    protected _handleIncomingBtpPacket(from: string, btpPacket: BtpPacket): Promise<void>;
    protected _handleData(from: string, btpPacket: BtpPacket): Promise<Array<BtpSubProtocol>>;
    protected _handleMoney(from: string, btpPacket: BtpPacket): Promise<Array<BtpSubProtocol>>;
    protected _handleOutgoingBtpPacket(to: string, btpPacket: BtpPacket): Promise<void>;
    private _emitDisconnect;
    private _emitConnect;
    private _validateAuthPacket;
}
export {};
