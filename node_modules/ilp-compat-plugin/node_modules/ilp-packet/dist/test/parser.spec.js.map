{"version":3,"file":"parser.spec.js","sourceRoot":"","sources":["../../test/parser.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from 'chai'\n\nimport loadTests from './helpers/loadTests'\n\nconst Parser = require('..')\n\ndescribe('Parser', function () {\n  describe('serializeIlpPayment', function () {\n    describe('correctly serializes valid ilp packets', function () {\n      const validTests = loadTests({ type: 'ilp_payment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n\n          const serialized = Parser.serializeIlpPayment(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpPayment', function () {\n    describe('correctly parses valid ilp packets', function () {\n      const validTests = loadTests({ type: 'ilp_payment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpPayment(binary)\n\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n  describe('serializeIlpForwardedPayment', function () {\n    describe('correctly serializes valid ilp packets', function () {\n      const validTests = loadTests({ type: 'ilp_forwarded_payment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n\n          const serialized = Parser.serializeIlpForwardedPayment(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpForwardedPayment', function () {\n    describe('correctly parses valid ilp packets', function () {\n      const validTests = loadTests({ type: 'ilp_forwarded_payment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpForwardedPayment(binary)\n\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpLiquidityRequest', function () {\n    describe('correctly serializes valid ilqp liquidity requests', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpLiquidityRequest(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpLiquidityRequest', function () {\n    describe('correctly parses valid ilqp liquidity requests', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpLiquidityRequest(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpLiquidityResponse', function () {\n    describe('correctly serializes valid ilqp liquidity responses', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.expiresAt = new Date(json.expiresAt)\n          json.liquidityCurve = Buffer.from(json.liquidityCurve, 'hex')\n\n          const serialized = Parser.serializeIlqpLiquidityResponse(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpLiquidityResponse', function () {\n    describe('correctly parses valid ilqp liquidity responses', function () {\n      const validTests = loadTests({ type: 'ilqp_liquidity_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpLiquidityResponse(binary)\n\n          parsed.expiresAt = parsed.expiresAt.getTime()\n          parsed.liquidityCurve = parsed.liquidityCurve.toString('hex')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpBySourceRequest', function () {\n    describe('correctly serializes valid ilqp by source requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpBySourceRequest(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpBySourceRequest', function () {\n    describe('correctly parses valid ilqp by source requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpBySourceRequest(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpBySourceResponse', function () {\n    describe('correctly serializes valid ilqp by source responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpBySourceResponse(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpBySourceResponse', function () {\n    describe('correctly parses valid ilqp by source responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_source_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpBySourceResponse(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpByDestinationRequest', function () {\n    describe('correctly serializes valid ilqp by destination requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpByDestinationRequest(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpByDestinationRequest', function () {\n    describe('correctly parses valid ilqp by destination requests', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_request' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpByDestinationRequest(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlqpByDestinationResponse', function () {\n    describe('correctly serializes valid ilqp by destination responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          const serialized = Parser.serializeIlqpByDestinationResponse(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlqpByDestinationResponse', function () {\n    describe('correctly parses valid ilqp by destination responses', function () {\n      const validTests = loadTests({ type: 'ilqp_by_destination_response' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlqpByDestinationResponse(binary)\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpError', function () {\n    describe('correctly serializes valid ilp errors', function () {\n      const validTests = loadTests({ type: 'ilp_error' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.triggeredAt = new Date(json.triggeredAt)\n\n          const serialized = Parser.serializeIlpError(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpError', function () {\n    describe('correctly parses valid ilp errors', function () {\n      const validTests = loadTests({ type: 'ilp_error' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpError(binary)\n\n          parsed.triggeredAt = parsed.triggeredAt.getTime()\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpFulfillment', function () {\n    describe('correctly serializes valid ilp fulfillments', function () {\n      const validTests = loadTests({ type: 'ilp_fulfillment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n\n          const serialized = Parser.serializeIlpFulfillment(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpFulfillment', function () {\n    describe('correctly parses valid ilp fulfillments', function () {\n      const validTests = loadTests({ type: 'ilp_fulfillment' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpFulfillment(binary)\n\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpRejection', function () {\n    describe('correctly serializes valid ilp rejections', function () {\n      const validTests = loadTests({ type: 'ilp_rejection' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n\n          const serialized = Parser.serializeIlpRejection(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpRejection', function () {\n    describe('correctly parses valid ilp rejections', function () {\n      const validTests = loadTests({ type: 'ilp_rejection' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpRejection(binary)\n\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpPrepare', function () {\n    describe('correctly serializes valid ilp prepare', function () {\n      const validTests = loadTests({ type: 'ilp_prepare' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n          json.executionCondition = Buffer.from(json.executionCondition, 'base64')\n          json.expiresAt = new Date(json.expiresAt)\n\n          const serialized = Parser.serializeIlpPrepare(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpPrepare', function () {\n    describe('correctly parses valid ilp prepare', function () {\n      const validTests = loadTests({ type: 'ilp_prepare' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpPrepare(binary)\n\n          parsed.data = parsed.data.toString('base64')\n          parsed.executionCondition = parsed.executionCondition.toString('base64')\n          parsed.expiresAt = parsed.expiresAt.toISOString()\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpFulfill', function () {\n    describe('correctly serializes valid ilp fulfill', function () {\n      const validTests = loadTests({ type: 'ilp_fulfill' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n          json.fulfillment = Buffer.from(json.fulfillment, 'base64')\n\n          const serialized = Parser.serializeIlpFulfill(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpFulfill', function () {\n    describe('correctly parses valid ilp fulfill', function () {\n      const validTests = loadTests({ type: 'ilp_fulfill' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpFulfill(binary)\n\n          parsed.fulfillment = parsed.fulfillment.toString('base64')\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('serializeIlpReject', function () {\n    describe('correctly serializes valid ilp reject', function () {\n      const validTests = loadTests({ type: 'ilp_reject' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const json = test.json\n\n          json.data = Buffer.from(json.data, 'base64')\n\n          const serialized = Parser.serializeIlpReject(json)\n\n          assert.deepEqual(serialized.toString('hex'), test.binary)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpReject', function () {\n    describe('correctly parses valid ilp reject', function () {\n      const validTests = loadTests({ type: 'ilp_reject' })\n\n      for (let test of validTests) {\n        it(test.name, function () {\n          const binary = new Buffer(test.binary, 'hex')\n\n          const parsed = Parser.deserializeIlpReject(binary)\n\n          parsed.data = parsed.data.toString('base64')\n\n          assert.deepEqual(parsed, test.json)\n        })\n      }\n    })\n  })\n\n  describe('deserializeIlpPacket', function () {\n    describe('correctly parses valid ilp packets', function () {\n      testPackets('ilp_payment', Parser.Type.TYPE_ILP_PAYMENT)\n      testPackets('ilqp_liquidity_request', Parser.Type.TYPE_ILQP_LIQUIDITY_REQUEST)\n      testPackets('ilqp_liquidity_response', Parser.Type.TYPE_ILQP_LIQUIDITY_RESPONSE)\n      testPackets('ilqp_by_source_request', Parser.Type.TYPE_ILQP_BY_SOURCE_REQUEST)\n      testPackets('ilqp_by_source_response', Parser.Type.TYPE_ILQP_BY_SOURCE_RESPONSE)\n      testPackets('ilqp_by_destination_request', Parser.Type.TYPE_ILQP_BY_DESTINATION_REQUEST)\n      testPackets('ilqp_by_destination_response', Parser.Type.TYPE_ILQP_BY_DESTINATION_RESPONSE)\n      testPackets('ilp_error', Parser.Type.TYPE_ILP_ERROR)\n      testPackets('ilp_fulfillment', Parser.Type.TYPE_ILP_FULFILLMENT)\n      testPackets('ilp_forwarded_payment', Parser.Type.TYPE_ILP_FORWARDED_PAYMENT)\n      testPackets('ilp_rejection', Parser.Type.TYPE_ILP_REJECTION)\n      testPackets('ilp_fulfill', Parser.Type.TYPE_ILP_FULFILL)\n      testPackets('ilp_prepare', Parser.Type.TYPE_ILP_PREPARE)\n      testPackets('ilp_reject', Parser.Type.TYPE_ILP_REJECT)\n\n      function testPackets (typeString: string, type: number) {\n        const validTests = loadTests({ type: typeString })\n        for (let test of validTests) {\n          it('parses ' + typeString + ': ' + test.name, function () {\n            const binary = new Buffer(test.binary, 'hex')\n            const parsed = Parser.deserializeIlpPacket(binary)\n            if (typeString === 'ilqp_liquidity_response') {\n              parsed.data.expiresAt = parsed.data.expiresAt.getTime()\n              parsed.data.liquidityCurve = parsed.data.liquidityCurve.toString('hex')\n            }\n            if (typeString === 'ilp_error') {\n              parsed.data.triggeredAt = parsed.data.triggeredAt.getTime()\n            }\n            if (typeString === 'ilp_payment' || typeString === 'ilp_forwarded_payment' || typeString === 'ilp_fulfillment' || typeString === 'ilp_rejection' || typeString === 'ilp_prepare' || typeString === 'ilp_fulfill' || typeString === 'ilp_reject') {\n              parsed.data.data = parsed.data.data.toString('base64')\n            }\n            if (typeString === 'ilp_prepare') {\n              parsed.data.expiresAt = parsed.data.expiresAt.toISOString()\n              parsed.data.executionCondition = parsed.data.executionCondition.toString('base64')\n            }\n            if (typeString === 'ilp_fulfill') {\n              parsed.data.fulfillment = parsed.data.fulfillment.toString('base64')\n            }\n            assert.deepEqual(parsed, { type, typeString, data: test.json })\n          })\n        }\n      }\n    })\n  })\n})\n"]}