"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oer_utils_1 = require("oer-utils");
const uint64_1 = require("./utils/uint64");
const BaseError = require("extensible-error");
exports.codes = {
    F00_BAD_REQUEST: 'F00',
    F01_INVALID_PACKET: 'F01',
    F02_UNREACHABLE: 'F02',
    F03_INVALID_AMOUNT: 'F03',
    F04_INSUFFICIENT_DESTINATION_AMOUNT: 'F04',
    F05_WRONG_CONDITION: 'F05',
    F06_UNEXPECTED_PAYMENT: 'F06',
    F07_CANNOT_RECEIVE: 'F07',
    F08_AMOUNT_TOO_LARGE: 'F08',
    F99_APPLICATION_ERROR: 'F99',
    T00_INTERNAL_ERROR: 'T00',
    T01_PEER_UNREACHABLE: 'T01',
    T02_PEER_BUSY: 'T02',
    T03_CONNECTOR_BUSY: 'T03',
    T04_INSUFFICIENT_LIQUIDITY: 'T04',
    T05_RATE_LIMITED: 'T05',
    T99_APPLICATION_ERROR: 'T99',
    R00_TRANSFER_TIMED_OUT: 'R00',
    R01_INSUFFICIENT_SOURCE_AMOUNT: 'R01',
    R02_INSUFFICIENT_TIMEOUT: 'R02',
    R99_APPLICATION_ERROR: 'R99'
};
class BadRequestError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F00_BAD_REQUEST;
    }
}
exports.BadRequestError = BadRequestError;
class InvalidPacketError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F01_INVALID_PACKET;
    }
}
exports.InvalidPacketError = InvalidPacketError;
class UnreachableError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F02_UNREACHABLE;
    }
}
exports.UnreachableError = UnreachableError;
class InvalidAmountError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F03_INVALID_AMOUNT;
    }
}
exports.InvalidAmountError = InvalidAmountError;
class InsufficientDestinationAmountError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F04_INSUFFICIENT_DESTINATION_AMOUNT;
    }
}
exports.InsufficientDestinationAmountError = InsufficientDestinationAmountError;
class WrongConditionError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F05_WRONG_CONDITION;
    }
}
exports.WrongConditionError = WrongConditionError;
class UnexpectedPaymentError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F06_UNEXPECTED_PAYMENT;
    }
}
exports.UnexpectedPaymentError = UnexpectedPaymentError;
class CannotReceiveError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.F07_CANNOT_RECEIVE;
    }
}
exports.CannotReceiveError = CannotReceiveError;
class AmountTooLargeError extends BaseError {
    constructor(message, opts) {
        super(message);
        this.ilpErrorCode = exports.codes.F08_AMOUNT_TOO_LARGE;
        const writer = new oer_utils_1.Writer();
        writer.writeUInt64(uint64_1.stringToTwoNumbers(opts.receivedAmount));
        writer.writeUInt64(uint64_1.stringToTwoNumbers(opts.maximumAmount));
        this.ilpErrorData = writer.getBuffer();
    }
}
exports.AmountTooLargeError = AmountTooLargeError;
class FinalApplicationError extends BaseError {
    constructor(message, data) {
        super(message);
        this.ilpErrorCode = exports.codes.F99_APPLICATION_ERROR;
        this.ilpErrorData = data;
    }
}
exports.FinalApplicationError = FinalApplicationError;
class InternalError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.T00_INTERNAL_ERROR;
    }
}
exports.InternalError = InternalError;
class PeerUnreachableError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.T01_PEER_UNREACHABLE;
    }
}
exports.PeerUnreachableError = PeerUnreachableError;
class PeerBusyError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.T02_PEER_BUSY;
    }
}
exports.PeerBusyError = PeerBusyError;
class ConnectorBusyError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.T03_CONNECTOR_BUSY;
    }
}
exports.ConnectorBusyError = ConnectorBusyError;
class InsufficientLiquidityError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.T04_INSUFFICIENT_LIQUIDITY;
    }
}
exports.InsufficientLiquidityError = InsufficientLiquidityError;
class RateLimitedError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.T05_RATE_LIMITED;
    }
}
exports.RateLimitedError = RateLimitedError;
class TemporaryApplicationError extends BaseError {
    constructor(message, data) {
        super(message);
        this.ilpErrorCode = exports.codes.T99_APPLICATION_ERROR;
        this.ilpErrorData = data;
    }
}
exports.TemporaryApplicationError = TemporaryApplicationError;
class TransferTimedOutError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.R00_TRANSFER_TIMED_OUT;
    }
}
exports.TransferTimedOutError = TransferTimedOutError;
class InsufficientSourceAmountError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.R01_INSUFFICIENT_SOURCE_AMOUNT;
    }
}
exports.InsufficientSourceAmountError = InsufficientSourceAmountError;
class InsufficientTimeoutError extends BaseError {
    constructor(message) {
        super(message);
        this.ilpErrorCode = exports.codes.R02_INSUFFICIENT_TIMEOUT;
    }
}
exports.InsufficientTimeoutError = InsufficientTimeoutError;
class RelativeApplicationError extends BaseError {
    constructor(message, data) {
        super(message);
        this.ilpErrorCode = exports.codes.R99_APPLICATION_ERROR;
        this.ilpErrorData = data;
    }
}
exports.RelativeApplicationError = RelativeApplicationError;
//# sourceMappingURL=errors.js.map