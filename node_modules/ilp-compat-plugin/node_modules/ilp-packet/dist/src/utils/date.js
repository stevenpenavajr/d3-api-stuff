"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function pad(n) {
    return n < 10
        ? '0' + n
        : String(n);
}
exports.dateToInterledgerTime = (date) => {
    return date.getUTCFullYear() +
        pad(date.getUTCMonth() + 1) +
        pad(date.getUTCDate()) +
        pad(date.getUTCHours()) +
        pad(date.getUTCMinutes()) +
        pad(date.getUTCSeconds()) +
        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5);
};
exports.INTERLEDGER_TIME_LENGTH = 17;
exports.INTERLEDGER_TIME_REGEX = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{3})$/;
exports.interledgerTimeToDate = (interledgerTime) => {
    const isoTimestamp = interledgerTime.replace(exports.INTERLEDGER_TIME_REGEX, '$1-$2-$3T$4:$5:$6.$7Z');
    const date = new Date(isoTimestamp);
    if (!date.valueOf()) {
        throw new Error('invalid date');
    }
    return date;
};
exports.dateToGeneralizedTime = (date) => {
    return date.toISOString().replace(/[\-T:]/g, '');
};
exports.GENERALIZED_TIME_REGEX = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2}\.[0-9]{3}Z)$/;
exports.generalizedTimeToDate = (generalizedTime) => {
    const isoTimestamp = generalizedTime.replace(exports.GENERALIZED_TIME_REGEX, '$1-$2-$3T$4:$5:$6');
    const date = new Date(isoTimestamp);
    if (!date.valueOf()) {
        throw new Error('invalid date');
    }
    return date;
};
//# sourceMappingURL=date.js.map