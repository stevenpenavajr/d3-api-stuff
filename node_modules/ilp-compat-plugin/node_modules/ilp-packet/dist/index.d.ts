/// <reference types="node" />
import * as errors from './src/errors';
export declare const Errors: typeof errors;
export declare enum Type {
    TYPE_ILP_PAYMENT = 1,
    TYPE_ILQP_LIQUIDITY_REQUEST = 2,
    TYPE_ILQP_LIQUIDITY_RESPONSE = 3,
    TYPE_ILQP_BY_SOURCE_REQUEST = 4,
    TYPE_ILQP_BY_SOURCE_RESPONSE = 5,
    TYPE_ILQP_BY_DESTINATION_REQUEST = 6,
    TYPE_ILQP_BY_DESTINATION_RESPONSE = 7,
    TYPE_ILP_ERROR = 8,
    TYPE_ILP_FULFILLMENT = 9,
    TYPE_ILP_FORWARDED_PAYMENT = 10,
    TYPE_ILP_REJECTION = 11,
    TYPE_ILP_PREPARE = 12,
    TYPE_ILP_FULFILL = 13,
    TYPE_ILP_REJECT = 14,
}
export interface IlpErrorClass {
    message: string;
    ilpErrorCode?: string;
    ilpErrorData?: Buffer;
}
export declare const errorToReject: (address: string, error: IlpErrorClass) => Buffer;
export declare const serializeEnvelope: (type: number, contents: Buffer) => Buffer;
export declare const deserializeEnvelope: (binary: Buffer) => {
    type: number;
    contents: Buffer;
};
export interface IlpPacket {
    type: Type;
    data: any;
}
export interface IlpPayment {
    amount: string;
    account: string;
    data: Buffer;
}
export interface IlpForwardedPayment {
    account: string;
    data: Buffer;
}
export declare const serializeIlpPayment: (json: IlpPayment) => Buffer;
export declare const deserializeIlpPayment: (binary: Buffer) => IlpPayment;
export declare const serializeIlpForwardedPayment: (json: IlpForwardedPayment) => Buffer;
export declare const deserializeIlpForwardedPayment: (binary: Buffer) => IlpForwardedPayment;
export interface IlqpLiquidityRequest {
    destinationAccount: string;
    destinationHoldDuration: number;
}
export declare const serializeIlqpLiquidityRequest: (json: IlqpLiquidityRequest) => Buffer;
export declare const deserializeIlqpLiquidityRequest: (binary: Buffer) => IlqpLiquidityRequest;
export interface IlqpLiquidityResponse {
    liquidityCurve: Buffer;
    appliesToPrefix: string;
    sourceHoldDuration: number;
    expiresAt: Date;
}
export declare const serializeIlqpLiquidityResponse: (json: IlqpLiquidityResponse) => Buffer;
export declare const deserializeIlqpLiquidityResponse: (binary: Buffer) => IlqpLiquidityResponse;
export interface IlqpBySourceRequest {
    destinationAccount: string;
    sourceAmount: string;
    destinationHoldDuration: number;
}
export declare const serializeIlqpBySourceRequest: (json: IlqpBySourceRequest) => Buffer;
export declare const deserializeIlqpBySourceRequest: (binary: Buffer) => IlqpBySourceRequest;
export interface IlqpBySourceResponse {
    destinationAmount: string;
    sourceHoldDuration: number;
}
export declare const serializeIlqpBySourceResponse: (json: IlqpBySourceResponse) => Buffer;
export declare const deserializeIlqpBySourceResponse: (binary: Buffer) => IlqpBySourceResponse;
export interface IlqpByDestinationRequest {
    destinationAccount: string;
    destinationAmount: string;
    destinationHoldDuration: number;
}
export declare const serializeIlqpByDestinationRequest: (json: IlqpByDestinationRequest) => Buffer;
export declare const deserializeIlqpByDestinationRequest: (binary: Buffer) => IlqpByDestinationRequest;
export interface IlqpByDestinationResponse {
    sourceAmount: string;
    sourceHoldDuration: number;
}
export declare const serializeIlqpByDestinationResponse: (json: IlqpByDestinationResponse) => Buffer;
export declare const deserializeIlqpByDestinationResponse: (binary: Buffer) => IlqpByDestinationResponse;
export interface IlpError {
    code: string;
    name: string;
    triggeredBy: string;
    forwardedBy: string[];
    triggeredAt: Date;
    data: string;
}
export declare const serializeIlpError: (json: IlpError) => Buffer;
export declare const deserializeIlpError: (binary: Buffer) => IlpError;
export interface IlpFulfillment {
    data: Buffer;
}
export declare const serializeIlpFulfillment: (json: IlpFulfillment) => Buffer;
export declare const deserializeIlpFulfillment: (binary: Buffer) => IlpFulfillment;
export interface IlpRejection {
    code: string;
    triggeredBy: string;
    message: string;
    data: Buffer;
}
export declare const serializeIlpRejection: (json: IlpRejection) => Buffer;
export declare const deserializeIlpRejection: (binary: Buffer) => IlpRejection;
export interface IlpPrepare {
    amount: string;
    executionCondition: Buffer;
    expiresAt: Date;
    destination: string;
    data: Buffer;
}
export declare const serializeIlpPrepare: (json: IlpPrepare) => Buffer;
export declare const deserializeIlpPrepare: (binary: Buffer) => IlpPrepare;
export interface IlpFulfill {
    fulfillment: Buffer;
    data: Buffer;
}
export declare const serializeIlpFulfill: (json: IlpFulfill) => Buffer;
export declare const deserializeIlpFulfill: (binary: Buffer) => IlpFulfill;
export declare const serializeIlpReject: (json: IlpRejection) => Buffer;
export declare const deserializeIlpReject: (binary: Buffer) => IlpRejection;
export declare const serializeIlpPacket: (obj: IlpPacket) => Buffer;
export declare const deserializeIlpPacket: (binary: Buffer) => {
    type: number;
    typeString: string;
    data: IlqpLiquidityRequest | IlqpLiquidityResponse | IlqpBySourceResponse | IlqpByDestinationResponse | IlpError | IlpFulfillment;
};
