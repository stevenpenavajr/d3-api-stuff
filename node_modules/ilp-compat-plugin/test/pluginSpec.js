'use strict'

describe('Plugin', function () {
  describe('sendTransfer', function () {
    it.only('rejects with Invalid Packet if the incoming transfer\'s ILP packet isn\'t valid', async function () {
      const promise = this.mockPlugin1Wrapped._transferHandler({
        id: '5857d460-2a46-4545-8311-1539d99e78e8',
        direction: 'incoming',
        ledger: 'mock.test1.',
        amount: '100',
        executionCondition: 'cc:0:',
        expiresAt: (new Date(START_DATE + 1000)).toISOString(),
        ilp: 'junk'
      })
      sinon.assert.calledOnce(rejectSpy)
      sinon.assert.calledWith(rejectSpy, '5857d460-2a46-4545-8311-1539d99e78e8', sinon.match({
        code: 'F01',
        name: 'Invalid Packet',
        message: 'source transfer has invalid ILP packet',
        triggered_by: 'mock.test1.bob',
        additional_info: {}
      }))
    })

    it.only('relays a cancellation', async function () {
  const rejectSpy = sinon.spy(this.mockPlugin2, 'rejectIncomingTransfer')
  await this.mockPlugin1.emitAsync('outgoing_cancel', {
    id: '5857d460-2a46-4545-8311-1539d99e78e8',
    direction: 'outgoing',
    ledger: 'mock.test1.',
    noteToSelf: {
      source_transfer_id: '130394ed-f621-4663-80dc-910adc66f4c6',
      source_transfer_ledger: 'mock.test2.',
      source_transfer_amount: '1.0'
    }
  }, {
    code: '123',
    name: 'Error 1',
    message: 'error 1',
    triggered_by: 'foo',
    additional_info: {}
  })
  sinon.assert.calledOnce(rejectSpy)
  sinon.assert.calledWith(rejectSpy, '130394ed-f621-4663-80dc-910adc66f4c6', {
    code: '123',
    name: 'Error 1',
    message: 'error 1',
    triggered_by: 'foo',
    forwarded_by: 'mock.test2.bob',
    additional_info: {}
  })
})


  })
})
