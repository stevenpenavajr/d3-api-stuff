{"version":3,"file":"BaseError.js","sourceRoot":"","sources":["../../src/errors/BaseError.ts"],"names":[],"mappings":";;AAaA,eAA+B,SAAQ,KAAK;IAC1C,YAAa,OAAgB;QAC3B,KAAK,EAAE,CAAA;QACP,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;QAGtC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;YACrC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;SACpD,CAAC,CAAA;QAGF,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;IACjD,CAAC;CACF;AAfD,4BAeC","sourcesContent":["/**\n * Extensible error class.\n *\n * The built-in Error class is not actually a constructor, but a factory. It\n * doesn't operate on `this`, so if we call it as `super()` it doesn't do\n * anything useful.\n *\n * Nonetheless it does create objects that are instanceof Error. In order to\n * easily subclass error we need our own base class which mimics that behavior\n * but with a true constructor.\n *\n * Note that this code is specific to V8 (due to `Error.captureStackTrace`).\n */\nexport default class BaseError extends Error {\n  constructor (message?: string) {\n    super()\n    Object.setPrototypeOf(this, BaseError)\n\n    // Set this.message\n    Object.defineProperty(this, 'message', {\n      configurable: true,\n      enumerable: false,\n      value: message !== undefined ? String(message) : ''\n    })\n\n    // Set this.stack\n    Error.captureStackTrace(this, this.constructor)\n  }\n}\n"]}