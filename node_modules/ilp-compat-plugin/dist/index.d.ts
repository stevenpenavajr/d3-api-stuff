/// <reference types="node" />
import { EventEmitter } from 'events';
import InvalidFieldsError from './errors/InvalidFieldsError';
import DataHandlerAlreadyRegisteredError from './errors/DataHandlerAlreadyRegisteredError';
import MoneyHandlerAlreadyRegisteredError from './errors/MoneyHandlerAlreadyRegisteredError';
import { TransferV1 } from './types';
export { InvalidFieldsError, DataHandlerAlreadyRegisteredError, MoneyHandlerAlreadyRegisteredError, TransferV1 };
export interface FunctionWithVersion extends Function {
    version?: number;
}
export interface DataHandler {
    (data: Buffer): Promise<Buffer>;
}
export interface MoneyHandler {
    (amount: string): Promise<void>;
}
export interface PluginV2 extends EventEmitter {
    constructor: FunctionWithVersion;
    connect: () => Promise<void>;
    disconnect: () => Promise<void>;
    isConnected: () => boolean;
    sendData: DataHandler;
    sendMoney: MoneyHandler;
    registerDataHandler: (handler: DataHandler) => void;
    deregisterDataHandler: () => void;
    registerMoneyHandler: (handler: MoneyHandler) => void;
    deregisterMoneyHandler: () => void;
}
export interface PluginV1 extends EventEmitter {
    constructor: FunctionWithVersion;
    sendTransfer: (transfer: TransferV1) => Promise<void>;
}
export declare const COMPAT_SYMBOL: symbol;
export default function convert(oldPlugin: PluginV1 | PluginV2): PluginV2;
