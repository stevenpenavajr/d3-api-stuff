{"version":3,"file":"converters.js","sourceRoot":"","sources":["../src/converters.ts"],"names":[],"mappings":"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","sourcesContent":["import uuid = require('uuid')\n\nimport {\n  TransferV1,\n  RejectionReasonV1\n} from './types'\n\nimport * as IlpPacket from 'ilp-packet'\n\nimport {\n  base64url\n} from './util'\n\nconst debug = require('debug')('ilp-compat-plugin:converters')\n\nexport const ERROR_NAMES = {\n  F00: 'Bad Request',\n  F01: 'Invalid Packet',\n  F02: 'Unreachable',\n  F03: 'Invalid Amount',\n  F04: 'Insufficient Destination Amount',\n  F05: 'Wrong Condition',\n  F06: 'Unexpected Payment',\n  F07: 'Cannot Receive',\n  F99: 'Application Error',\n  T00: 'Internal Error',\n  T01: 'Ledger Unreachable',\n  T02: 'Ledger Busy',\n  T03: 'Connector Busy',\n  T04: 'Insufficient Liquidity',\n  T05: 'Rate Limited',\n  T99: 'Application Error',\n  R00: 'Transfer Timed Out',\n  R01: 'Insufficient Source Amount',\n  R02: 'Insufficient Timeout',\n  R99: 'Application Error'\n}\n\nexport const lpi1TransferToIlpPrepare = (lpi1Transfer: TransferV1): Buffer => {\n  if (!lpi1Transfer.ilp) {\n    throw new TypeError('no packet attached to transfer.')\n  }\n  const deserializedPacket = IlpPacket.deserializeIlpPacket(Buffer.from(lpi1Transfer.ilp, 'base64'))\n\n  if (deserializedPacket.type !== IlpPacket.Type.TYPE_ILP_PAYMENT && deserializedPacket.type !== IlpPacket.Type.TYPE_ILP_FORWARDED_PAYMENT) {\n    throw new TypeError('invalid type of ilp packet: ' + deserializedPacket.type)\n  }\n\n  if (deserializedPacket.type === IlpPacket.Type.TYPE_ILP_PAYMENT) {\n    debug('delivered payments are no longer supported, converting to forwarded payment.')\n  }\n\n  const { account, data } = deserializedPacket.data as IlpPacket.IlpForwardedPayment\n\n  return IlpPacket.serializeIlpPrepare({\n    amount: lpi1Transfer.amount,\n    executionCondition: Buffer.from(lpi1Transfer.executionCondition, 'base64'),\n    expiresAt: new Date(lpi1Transfer.expiresAt),\n    destination: account,\n    data\n  })\n}\n\nexport const ilpPrepareToLpi1Transfer = (ilpPrepare: IlpPacket.IlpPrepare): TransferV1 => {\n  const id = uuid()\n\n  const {\n    amount,\n    executionCondition,\n    expiresAt,\n    destination,\n    data\n  } = ilpPrepare\n\n  const ilp = IlpPacket.serializeIlpForwardedPayment({\n    account: destination,\n    data\n  })\n\n  return {\n    id,\n    amount,\n    ilp: base64url(ilp),\n    executionCondition: base64url(executionCondition),\n    expiresAt: expiresAt.toISOString(),\n    custom: {}\n  }\n}\n\nexport const ilpFulfillToLpi1Fulfillment = (packet: Buffer): { fulfillment: string, ilp: string } => {\n  const { fulfillment, data } = IlpPacket.deserializeIlpFulfill(packet)\n  const ilp = IlpPacket.serializeIlpFulfillment({ data })\n  return { fulfillment: base64url(fulfillment), ilp: base64url(ilp) }\n}\n\nexport const lpi1FulfillmentToIlpFulfill = (fulfillment: string, ilp: string): Buffer => {\n  const { data } = ilp\n    ? IlpPacket.deserializeIlpFulfillment(Buffer.from(ilp, 'base64'))\n    : { data: Buffer.alloc(0) }\n  return IlpPacket.serializeIlpFulfill({\n    fulfillment: Buffer.from(fulfillment, 'base64'),\n    data\n  })\n}\n\nexport const ilpRejectToLpi1Rejection = (packet: Buffer): RejectionReasonV1 => {\n  const {\n    code,\n    triggeredBy,\n    message,\n    data\n  } = IlpPacket.deserializeIlpReject(packet)\n\n  return {\n    code,\n    name: ERROR_NAMES[code],\n    message,\n    triggered_by: triggeredBy,\n    triggered_at: new Date(),\n    forwarded_by: '',\n    additional_info: { data: base64url(data), message }\n  }\n}\n\ninterface AdditionalInfo {\n  data?: string,\n  message?: string\n}\n\nexport const lpi1RejectionToIlpReject = (reason: RejectionReasonV1): Buffer => {\n  const {\n    code,\n    message,\n    triggered_by: triggeredBy,\n    additional_info: additionalInfo\n  } = reason\n\n  let info: AdditionalInfo = {}\n  if (typeof additionalInfo === 'string') {\n    try {\n      info = JSON.parse(additionalInfo)\n    } catch (e) {\n      // do nothing\n    }\n  } else if (typeof additionalInfo === 'object') {\n    info = additionalInfo\n  }\n\n  let data = Buffer.alloc(0)\n  if (info.data) {\n    data = Buffer.from(info.data, 'base64')\n  }\n\n  return IlpPacket.serializeIlpReject({\n    code,\n    triggeredBy,\n    message: message || info.message || '',\n    data\n  })\n}\n"]}