{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport InvalidFieldsError from './errors/InvalidFieldsError'\nimport DataHandlerAlreadyRegisteredError from './errors/DataHandlerAlreadyRegisteredError'\nimport MoneyHandlerAlreadyRegisteredError from './errors/MoneyHandlerAlreadyRegisteredError'\nimport * as IlpPacket from 'ilp-packet'\nimport { Writer } from 'oer-utils'\n\nimport {\n  lpi1TransferToIlpPrepare,\n  ilpFulfillToLpi1Fulfillment,\n  lpi1FulfillmentToIlpFulfill,\n  ilpRejectToLpi1Rejection,\n  lpi1RejectionToIlpReject,\n  ilpPrepareToLpi1Transfer\n} from './converters'\n\nimport {\n  base64url\n} from './util'\n\nimport {\n  TransferV1,\n  RejectionReasonV1,\n  MessageV1\n} from './types'\n\nconst debug = require('debug')('ilp-compat-plugin')\n\nexport {\n  InvalidFieldsError,\n  DataHandlerAlreadyRegisteredError,\n  MoneyHandlerAlreadyRegisteredError,\n\n  TransferV1\n}\n\nexport interface FunctionWithVersion extends Function {\n  version?: number\n}\n\nexport interface DataHandler {\n  (data: Buffer): Promise<Buffer>\n}\n\nexport interface MoneyHandler {\n  (amount: string): Promise<void>\n}\n\nexport interface PluginV2 extends EventEmitter {\n  constructor: FunctionWithVersion\n  connect: () => Promise<void>\n  disconnect: () => Promise<void>\n  isConnected: () => boolean\n  sendData: DataHandler\n  sendMoney: MoneyHandler\n  registerDataHandler: (handler: DataHandler) => void\n  deregisterDataHandler: () => void\n  registerMoneyHandler: (handler: MoneyHandler) => void\n  deregisterMoneyHandler: () => void\n}\n\nexport interface PluginV1 extends EventEmitter {\n  constructor: FunctionWithVersion,\n  sendTransfer: (transfer: TransferV1) => Promise<void>\n}\n\nconst PASSTHROUGH_EVENTS = [\n  'connect',\n  'disconnect',\n  'error',\n  'info_change'\n]\n\nconst PEER_PROTOCOL_FULFILLMENT = Buffer.alloc(32)\n\nexport const COMPAT_SYMBOL = Symbol()\n\nclass Plugin extends EventEmitter {\n  static readonly version = 2\n\n  private oldPlugin: any\n  private transfers: {\n    [key: string]: {\n      resolve: (result: Buffer) => void,\n      reject: (err: Error) => void\n    }\n  }\n  private _dataHandler?: DataHandler\n  private _moneyHandler?: MoneyHandler\n\n  constructor (oldPlugin: any) {\n    super()\n\n    this.oldPlugin = oldPlugin\n\n    this.transfers = {}\n\n    const originalEmit = this.oldPlugin.emit\n    this.oldPlugin.emit = (eventType: string, ...args: any[]) => {\n      // Emit on both the original plugin and - for some event types - also\n      // on the wrapper\n      originalEmit.call(oldPlugin, eventType, ...args)\n\n      if (PASSTHROUGH_EVENTS.indexOf(eventType) !== -1) {\n        this.emit(eventType, ...args)\n      }\n    }\n\n    this.oldPlugin.on('outgoing_fulfill', this._handleOutgoingFulfill.bind(this))\n    this.oldPlugin.on('outgoing_reject', this._handleOutgoingReject.bind(this, 'reject'))\n    this.oldPlugin.on('outgoing_cancel', this._handleOutgoingReject.bind(this, 'cancel'))\n    this.oldPlugin.on('incoming_transfer', this._handleIncomingTransfer.bind(this))\n    this.oldPlugin.on('incoming_prepare', this._handleIncomingPrepare.bind(this))\n    this.oldPlugin.registerRequestHandler(this._handleRequest.bind(this))\n  }\n\n  static isV2Plugin (plugin: PluginV1 | PluginV2): plugin is PluginV2 {\n    return plugin.constructor.version === 2\n  }\n\n  connect () {\n    return this.oldPlugin.connect()\n  }\n\n  disconnect () {\n    return this.oldPlugin.disconnect()\n  }\n\n  isConnected () {\n    return this.oldPlugin.isConnected()\n  }\n\n  async sendData (data: Buffer): Promise<Buffer> {\n    if (!Buffer.isBuffer(data)) {\n      throw new TypeError('sendData must be passed a buffer. typeof=' + typeof data)\n    }\n\n    if (data[0] === IlpPacket.Type.TYPE_ILP_PREPARE) {\n      const ilpPrepare = IlpPacket.deserializeIlpPrepare(data)\n\n      if (ilpPrepare.destination === 'peer.config') {\n        return this._getIldcpResponse()\n      }\n\n      const lpi1Transfer = ilpPrepareToLpi1Transfer(ilpPrepare)\n\n      lpi1Transfer.to = this._getTo(ilpPrepare.destination)\n      lpi1Transfer.from = this.oldPlugin.getAccount(),\n      lpi1Transfer.ledger = this.oldPlugin.getInfo().prefix\n\n      return new Promise<Buffer>((resolve, reject) => {\n        this.transfers[lpi1Transfer.id] = { resolve, reject }\n\n        this.oldPlugin.sendTransfer(lpi1Transfer)\n          .catch(reject)\n      })\n    } else {\n      const responseMessage = await this.oldPlugin.sendRequest({\n        from: this.oldPlugin.getAccount(),\n        to: this._getTo(),\n        ledger: this.oldPlugin.getInfo().prefix,\n        ilp: base64url(data)\n      })\n\n      if (responseMessage.ilp) {\n        return Buffer.from(responseMessage.ilp, 'base64')\n      } else if (\n        responseMessage.custom &&\n        typeof responseMessage.custom === 'object' &&\n        Object.keys(responseMessage.custom).length\n      ) {\n        // Convert old \"custom\" based requests (like CCPv1) into data\n        return Buffer.from(JSON.stringify(responseMessage.custom))\n      } else {\n        debug('received empty response.')\n        return Buffer.alloc(0)\n      }\n    }\n  }\n\n  async sendMoney (amount: string) {\n    // TODO: We already send money when making ILP payments. But perhaps we\n    //   should be smart enough to also send money (using optimistic mode) when\n    //   the amount from sendMoney calls exceeds the amount from ILP payments.\n    return\n  }\n\n  registerDataHandler (handler: DataHandler): void {\n    if (this._dataHandler) {\n      throw new DataHandlerAlreadyRegisteredError('data handler is already registered.')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new InvalidFieldsError('data handler must be a function.')\n    }\n\n    this._dataHandler = handler\n  }\n\n  deregisterDataHandler (): void {\n    this._dataHandler = undefined\n  }\n\n  registerMoneyHandler (handler: MoneyHandler): void {\n    if (this._moneyHandler) {\n      throw new MoneyHandlerAlreadyRegisteredError('money handler is already registered.')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new InvalidFieldsError('money handler must be a function.')\n    }\n\n    this._moneyHandler = handler\n  }\n\n  deregisterMoneyHandler (): void {\n    this._moneyHandler = undefined\n  }\n\n  protected _getTo (destination?: string): string {\n    const prefix = this.oldPlugin.getInfo().prefix\n\n    let to\n    if (destination && destination.startsWith(prefix)) {\n      // If the destination starts with the ledger prefix, we deliver to the\n      // local account as identified by the first segment after the prefix\n      to = prefix + destination.substring(prefix.length).split('.')[0]\n    } else {\n      // Otherwise, we deliver to the default connector\n      to = this.oldPlugin.getInfo().connectors[0]\n    }\n\n    if (!to) {\n      throw new Error('No valid destination: no connector and destination is not local. destination=' + destination + ' prefix=' + prefix)\n    }\n\n    return to\n  }\n\n  protected _handleOutgoingFulfill (transfer: TransferV1, fulfillment: string, ilp: string) {\n    if (!this.transfers[transfer.id]) {\n      debug('fulfillment for outgoing transfer ignored, unknown transfer id. transferId=%s', transfer.id)\n      return\n    }\n    debug('outgoing transfer fulfilled. transferId=%s', transfer.id)\n\n    const ilpFulfill = lpi1FulfillmentToIlpFulfill(fulfillment, ilp)\n\n    const { resolve } = this.transfers[transfer.id]\n\n    resolve(ilpFulfill)\n  }\n\n  protected _handleOutgoingReject (type: 'reject' | 'cancel', transfer: TransferV1, reason: RejectionReasonV1) {\n    if (!this.transfers[transfer.id]) {\n      debug('%sion for outgoing transfer ignored, unknown transfer id. transferId=%s', type, transfer.id)\n      return\n    }\n    debug('outgoing transfer %sed. transferId=%s', type, transfer.id)\n\n    const { resolve, reject } = this.transfers[transfer.id]\n\n    try {\n      const ilpReject = lpi1RejectionToIlpReject(reason)\n\n      // ILP rejections are successful returns from a plugin perspective, i.e.\n      // we sent data and we successfully got a response.\n      resolve(ilpReject)\n    } catch (err) {\n      reject(err)\n    }\n  }\n\n  protected _handleIncomingTransfer (lpi1Transfer: TransferV1) {\n    debug('incoming optimistic transfer. transferId=%s amount=%s', lpi1Transfer.id, lpi1Transfer.amount)\n\n    if (!this._moneyHandler) {\n      debug(`no money handler, ignoring incoming optimistic transfer ${lpi1Transfer.id}`)\n      return\n    }\n\n    Promise.resolve(this._moneyHandler(lpi1Transfer.amount))\n      .catch(err => {\n        const errInfo = (err && typeof err === 'object' && err.stack) ? err.stack : err\n        debug(`could not process incoming money ${lpi1Transfer.id}: ${errInfo}`)\n      })\n  }\n\n  protected _handleIncomingPrepare (lpi1Transfer: TransferV1) {\n    debug('incoming prepared transfer. transferId=%s', lpi1Transfer.id)\n\n    const ilpPrepare = lpi1TransferToIlpPrepare(lpi1Transfer)\n\n    ;(async () => {\n      if (!this._dataHandler) {\n        debug(`no data handler, rejecting incoming transfer ${lpi1Transfer.id}`)\n        // Reject incoming transfer due to lack of handler\n        this.oldPlugin.rejectIncomingTransfer(lpi1Transfer.id, {\n          code: 'T01',\n          name: 'Ledger Unreachable',\n          message: 'No data handler registered',\n          triggered_by: this.oldPlugin.getAccount(),\n          triggered_at: new Date(),\n          forwarded_by: ''\n        })\n        return\n      }\n\n      const responsePacket = await this._dataHandler(ilpPrepare)\n\n      if (responsePacket[0] === IlpPacket.Type.TYPE_ILP_FULFILL) {\n        const { fulfillment, ilp } = ilpFulfillToLpi1Fulfillment(responsePacket)\n\n        this.oldPlugin.fulfillCondition(lpi1Transfer.id, fulfillment, ilp)\n      } else if (responsePacket[0] === IlpPacket.Type.TYPE_ILP_REJECT) {\n        const reason = ilpRejectToLpi1Rejection(responsePacket)\n\n        this.oldPlugin.rejectIncomingTransfer(lpi1Transfer.id, reason)\n      } else {\n        throw new Error('unknown ilp response packet.')\n      }\n    })()\n      .catch(err => {\n        const errInfo = (err && typeof err === 'object' && err.stack) ? err.stack : err\n        debug(`could not process incoming transfer ${lpi1Transfer.id}: ${errInfo}`)\n\n        this.oldPlugin.rejectIncomingTransfer(lpi1Transfer.id, {\n          code: 'F00',\n          name: 'Bad Request',\n          message: err.message,\n          triggered_by: '',\n          triggered_at: new Date(),\n          forwarded_by: ''\n        })\n      })\n  }\n\n  protected async _handleRequest (request: MessageV1) {\n    if (!this._dataHandler) {\n      debug(`no data handler, rejecting incoming request ${request.id}`)\n      throw new Error('no handler.')\n    }\n\n    if (request.ilp) {\n      return {\n        to: request.from,\n        from: request.to,\n        ledger: request.ledger,\n        ilp: base64url(await this._dataHandler(Buffer.from(request.ilp, 'base64')))\n      }\n    } else {\n      throw new Error('cannot handle requests without ilp packet')\n    }\n  }\n\n  protected _getIldcpResponse () {\n    const info = this.oldPlugin.getInfo()\n    const clientName = this.oldPlugin.getAccount()\n\n    const writer = new Writer()\n    writer.writeVarOctetString(Buffer.from(clientName, 'ascii'))\n    writer.writeUInt8(info.currencyScale || 9)\n    writer.writeVarOctetString(Buffer.from(info.currency || '', 'utf8'))\n    const ildcpResponse = writer.getBuffer()\n\n    return IlpPacket.serializeIlpFulfill({\n      fulfillment: PEER_PROTOCOL_FULFILLMENT,\n      data: ildcpResponse\n    })\n  }\n}\n\nexport default function convert (oldPlugin: PluginV1 | PluginV2): PluginV2 {\n  if (typeof oldPlugin !== 'object') {\n    throw new TypeError('not a plugin: not an object')\n  }\n\n  if (Plugin.isV2Plugin(oldPlugin)) {\n    return oldPlugin\n  }\n\n  if (typeof oldPlugin.sendTransfer !== 'function') {\n    throw new TypeError('not a plugin: no sendTransfer method')\n  }\n\n  if (oldPlugin[COMPAT_SYMBOL]) {\n    return oldPlugin[COMPAT_SYMBOL]\n  }\n\n  const instance = new Plugin(oldPlugin)\n\n  oldPlugin[COMPAT_SYMBOL] = instance\n\n  return instance\n}\n\n// Support both the Node.js and ES6 module exports\nconst es6Exports = exports\nmodule.exports = convert\nObject.assign(module.exports, es6Exports)\n"]}