{"version":3,"file":"encoding.js","sourceRoot":"","sources":["encoding.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert'\nimport * as crypto from 'crypto'\nimport * as oer from 'oer-utils'\nimport BigNumber from 'bignumber.js'\nimport * as Long from 'long'\nimport * as constants from './constants'\n\nexport interface LegacyPskPacket {\n  type: number,\n  paymentId: Buffer,\n  sequence: number,\n  paymentAmount: BigNumber,\n  chunkAmount: BigNumber,\n  applicationData?: Buffer\n}\n\nexport enum Type {\n  Request = 4,\n  Response = 5,\n  Error = 6\n}\n\nexport interface PskPacket {\n  type: Type,\n  requestId: number,\n  amount: BigNumber,\n  data: Buffer\n}\n\nexport function serializePskPacket (sharedSecret: Buffer, pskPacket: PskPacket): Buffer {\n  const {\n    type,\n    requestId,\n    amount,\n    data\n  } = pskPacket\n  assert(Number.isInteger(requestId) && requestId <= constants.MAX_UINT32, 'requestId must be a UInt32')\n  assert(amount instanceof BigNumber && amount.isInteger() && amount.lte(constants.MAX_UINT64), 'amount must be a UInt64')\n\n  const writer = new oer.Writer()\n  writer.writeUInt8(type)\n  writer.writeUInt32(requestId)\n  writer.writeUInt64(bigNumberToHighLow(amount))\n  writer.writeVarOctetString(data)\n  const plaintext = writer.getBuffer()\n\n  const ciphertext = encrypt(sharedSecret, plaintext)\n  return ciphertext\n}\n\nexport function deserializePskPacket (sharedSecret: Buffer, buffer: Buffer): PskPacket {\n  const plaintext = decrypt(sharedSecret, buffer)\n  const reader = oer.Reader.from(plaintext)\n\n  const type = reader.readUInt8()\n  assert(Type[type], 'PSK packet has unexpected type: ' + type)\n\n  return {\n    type,\n    requestId: reader.readUInt32(),\n    amount: highLowToBigNumber(reader.readUInt64()),\n    data: reader.readVarOctetString()\n  }\n}\n\n/**\n * Serialize and encrypt a Legacy PSK2 packet.\n * The result may be sent as the `data` in an `IlpPrepare`, `IlpFulfill`, or `IlpReject` packet.\n */\nexport function serializeLegacyPskPacket (sharedSecret: Buffer, pskPacket: LegacyPskPacket): Buffer {\n  const {\n    type,\n    paymentId,\n    sequence,\n    paymentAmount,\n    chunkAmount,\n    applicationData = Buffer.alloc(0)\n  } = pskPacket\n  assert(Number.isInteger(type) && type < 256, 'type must be a UInt8')\n  assert(Buffer.isBuffer(paymentId) && paymentId.length === 16, 'paymentId must be a 16-byte buffer')\n  assert(Number.isInteger(sequence) && sequence <= constants.MAX_UINT32, 'sequence must be a UInt32')\n  assert(paymentAmount instanceof BigNumber && paymentAmount.isInteger() && paymentAmount.lte(constants.MAX_UINT64), 'paymentAmount must be a UInt64')\n  assert(chunkAmount instanceof BigNumber && chunkAmount.isInteger() && chunkAmount.lte(constants.MAX_UINT64), 'chunkAmount must be a UInt64')\n  assert(Buffer.isBuffer(applicationData), 'applicationData must be a buffer')\n\n  const writer = new oer.Writer()\n  writer.writeUInt8(type)\n  writer.writeOctetString(paymentId, 16)\n  writer.writeUInt32(sequence)\n  writer.writeUInt64(bigNumberToHighLow(paymentAmount))\n  writer.writeUInt64(bigNumberToHighLow(chunkAmount))\n  writer.writeVarOctetString(applicationData)\n  writer.writeUInt8(0) // OER extensibility\n  const contents = writer.getBuffer()\n\n  // TODO add junk data\n\n  const ciphertext = encrypt(sharedSecret, contents)\n  return ciphertext\n}\n\n/**\n * Decrypt and deserialize a Legacy PSK2 packet.\n */\nexport function deserializeLegacyPskPacket (sharedSecret: Buffer, ciphertext: Buffer): LegacyPskPacket {\n  const contents = decrypt(sharedSecret, ciphertext)\n  const reader = new oer.Reader(contents)\n\n  return {\n    type: reader.readUInt8(),\n    paymentId: reader.readOctetString(16),\n    sequence: reader.readUInt32(),\n    paymentAmount: highLowToBigNumber(reader.readUInt64()),\n    chunkAmount: highLowToBigNumber(reader.readUInt64()),\n    applicationData: reader.readVarOctetString()\n  }\n}\n\nfunction encrypt (secret: Buffer, data: Buffer): Buffer {\n  const iv = crypto.randomBytes(constants.IV_LENGTH)\n  const pskEncryptionKey = hmac(secret, Buffer.from(constants.PSK_ENCRYPTION_STRING, 'utf8'))\n  const cipher = crypto.createCipheriv(constants.ENCRYPTION_ALGORITHM, pskEncryptionKey, iv)\n\n  const encryptedInitial = cipher.update(data)\n  const encryptedFinal = cipher.final()\n  const tag = cipher.getAuthTag()\n  return Buffer.concat([\n    iv,\n    tag,\n    encryptedInitial,\n    encryptedFinal\n  ])\n}\n\nfunction decrypt (secret: Buffer, data: Buffer): Buffer {\n  assert(data.length > 0, 'cannot decrypt empty buffer')\n  const pskEncryptionKey = hmac(secret, Buffer.from(constants.PSK_ENCRYPTION_STRING, 'utf8'))\n  const nonce = data.slice(0, constants.IV_LENGTH)\n  const tag = data.slice(constants.IV_LENGTH, constants.IV_LENGTH + constants.AUTH_TAG_LENGTH)\n  const encrypted = data.slice(constants.IV_LENGTH + constants.AUTH_TAG_LENGTH)\n  const decipher = crypto.createDecipheriv(constants.ENCRYPTION_ALGORITHM, pskEncryptionKey, nonce)\n  decipher.setAuthTag(tag)\n\n  return Buffer.concat([\n    decipher.update(encrypted),\n    decipher.final()\n  ])\n}\n\nfunction hmac (key: Buffer, message: Buffer): Buffer {\n  const h = crypto.createHmac('sha256', key)\n  h.update(message)\n  return h.digest()\n}\n\n// oer-utils returns [high, low], whereas Long expects low first\nfunction highLowToBigNumber (highLow: number[]): BigNumber {\n  // TODO use a more efficient method to convert this\n  const long = Long.fromBits(highLow[1], highLow[0], true)\n  return new BigNumber(long.toString(10))\n}\n\nfunction bigNumberToHighLow (bignum: BigNumber): number[] {\n  const long = Long.fromString(bignum.toString(10), true)\n  return [long.getHighBitsUnsigned(), long.getLowBitsUnsigned()]\n}\n"]}