{"version":3,"file":"condition.js","sourceRoot":"","sources":["condition.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,yCAAwC;AAExC,2BAAmC,MAAc,EAAE,IAAY;IAC7D,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAA;IAC/E,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;IACnC,MAAM,CAAC,WAAW,CAAA;AACpB,CAAC;AAJD,8CAIC;AAED,cAAe,GAAW,EAAE,OAAe;IACzC,MAAM,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;IAC1C,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;IACjB,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAA;AACnB,CAAC;AAED,gCAAwC,QAAgB;IACtD,MAAM,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;IACrC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;IAClB,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAA;AACnB,CAAC;AAJD,wDAIC","sourcesContent":["import crypto = require('crypto')\nimport * as constants from './constants'\n\nexport function dataToFulfillment (secret: Buffer, data: Buffer): Buffer {\n  const key = hmac(secret, Buffer.from(constants.PSK_FULFILLMENT_STRING, 'utf8'))\n  const fulfillment = hmac(key, data)\n  return fulfillment\n}\n\nfunction hmac (key: Buffer, message: Buffer) {\n  const h = crypto.createHmac('sha256', key)\n  h.update(message)\n  return h.digest()\n}\n\nexport function fulfillmentToCondition (preimage: Buffer): Buffer {\n  const h = crypto.createHash('sha256')\n  h.update(preimage)\n  return h.digest()\n}\n"]}