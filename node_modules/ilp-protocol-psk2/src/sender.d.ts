/// <reference types="node" />
import BigNumber from 'bignumber.js';
import { PluginV1, PluginV2 } from 'ilp-compat-plugin';
export interface SendRequestParams {
    sharedSecret: Buffer;
    destinationAccount: string;
    sourceAmount: BigNumber | string | number;
    data?: Buffer;
    minDestinationAmount?: BigNumber | string | number;
    requestId?: number;
    expiresAt?: Date;
    unfulfillableCondition?: Buffer;
}
export interface PskResponse {
    fulfilled: boolean;
    destinationAmount: BigNumber;
    data: Buffer;
}
export interface PskError {
    fulfilled: boolean;
    code: string;
    message: string;
    triggeredBy: string;
    destinationAmount: BigNumber;
    data: Buffer;
    unauthenticatedData: Buffer;
}
export declare function isPskResponse(result: PskResponse | PskError): result is PskResponse;
export declare function isPskError(result: PskResponse | PskError): result is PskError;
export declare function sendRequest(plugin: PluginV2, params: SendRequestParams): Promise<PskResponse | PskError>;
export interface QuoteSourceParams {
    sourceAmount: BigNumber | string | number;
    sharedSecret: Buffer;
    destinationAccount: string;
    id?: Buffer;
}
export interface QuoteDestinationParams {
    destinationAmount: BigNumber | string | number;
    sharedSecret: Buffer;
    destinationAccount: string;
    id?: Buffer;
}
export interface QuoteResult {
    sourceAmount: string;
    destinationAmount: string;
}
export interface SendSingleChunkParams {
    sourceAmount: BigNumber | string | number;
    sharedSecret: Buffer;
    destinationAccount: string;
    minDestinationAmount?: BigNumber | string | number;
}
export interface SendSingleChunkAdvancedParams {
    sourceAmount: BigNumber | string | number;
    sharedSecret: Buffer;
    destinationAccount: string;
    minDestinationAmount?: BigNumber | string | number;
    id: Buffer;
    sequence: number;
    lastChunk: boolean;
}
export interface SendResult {
    id: Buffer;
    sourceAmount: string;
    destinationAmount: string;
    chunksFulfilled: number;
    chunksRejected: number;
}
export interface SendSourceParams {
    sourceAmount: BigNumber | string | number;
    sharedSecret: Buffer;
    destinationAccount: string;
    id?: Buffer;
}
export interface SendDestinationParams {
    destinationAmount: BigNumber | string | number;
    sharedSecret: Buffer;
    destinationAccount: string;
    id?: Buffer;
}
export declare function quoteSourceAmount(plugin: PluginV2 | PluginV1, params: QuoteSourceParams): Promise<QuoteResult>;
export declare function quoteDestinationAmount(plugin: PluginV2 | PluginV1, params: QuoteDestinationParams): Promise<QuoteResult>;
export declare function sendSingleChunk(plugin: any, params: SendSingleChunkParams | SendSingleChunkAdvancedParams): Promise<SendResult>;
export declare function sendSourceAmount(plugin: any, params: SendSourceParams): Promise<SendResult>;
export declare function sendDestinationAmount(plugin: any, params: SendDestinationParams): Promise<SendResult>;
